digraph "Execution Trace Graph" {
	label="Execution Trace Graph";

	Node0 [label = "0"];
	Node0x6eb800 [label = "0x6eb800"];
	Node0x6edb90 [label = "0x6edb90"];
	Node0x6f1210 [label = "FunctionInvocation (calling-line=regs.rax = puts (/*\"last line!\"*/ (const char *) 0x4008c7);)"];
	Node0x6fe290 [label = "FunctionInvocation (calling-line=regs.rax = puts (/*\"sum of two numbers is NOT more than 15\"*/ (const char *) 0x4008a0);)"];
	Node0x7f5c40 [label = "FunctionInvocation (calling-line=regs.rax = puts (/*\"invalid right value!\"*/ (const char *) 0x400828);)"];
	Node0x8f71a0 [label = "FunctionInvocation (calling-line=regs.rax = puts (/*\"sum of two numbers is more than 15\"*/ (const char *) 0x400878);)"];
	Node0x8f7de0 [label = "0x8f7de0"];
	Node0x9c1cc0 [label = "FunctionInvocation (calling-line=regs.rax = strcmp (/*\"--left\"*/ (const char *) m7fffffffe330_0_64 /*0x7fffffffe56c*/, /*\"--left\"*/ (const char *) 0x4007d4);)"];
	Node0x9f2cd0 [label = "0x9f2cd0"];
	Node0x9fb880 [label = "0x9fb880"];
	Node0x13fa150 [label = "FunctionInvocation (calling-line=regs.rax = puts (/*\"right option is missing!\"*/ (const char *) 0x40080f);)"];
	Node0x14c6680 [label = "FunctionInvocation (calling-line=regs.rax = puts (/*\"invalid left value!\"*/ (const char *) 0x4007f3);)"];
	Node0x14de2b0 [label = "FunctionInvocation (calling-line=regs.rax = puts (/*\"left option is missing!\"*/ (const char *) 0x4007db);)"];
	Node0x1658c70 [label = "FunctionInvocation (calling-line=regs.rax = puts (/*\"Usage: program --left <num1> --right <num2>\"*/ (const char *) 0x4007a8);)"];
	Node0x1745fb0 [label = "0x1745fb0"];
	Node0x179d4b0 [label = "0x179d4b0"];
	Node0x17a0600 [label = "0x17a0600"];
	Node0x17b2e40 [label = "0x17b2e40"];
	Node0x1810b20 [label = "0x1810b20"];
	Node0x1854a00 [label = "FunctionInvocation (calling-line=regs.rax = puts (/*\"num1 is NOT smaller than num2\"*/ (const char *) 0x400857);)"];
	Node0x189a770 [label = "0x189a770"];
	Node0x18df060 [label = "0x18df060"];
	Node0x19f5b60 [label = "FunctionInvocation (calling-line=regs.rax = puts (/*\"num1 is smaller than num2\"*/ (const char *) 0x40083d);)"];
	Node0x1a37b80 [label = "0x1a37b80"];
	Node0x1a45d70 [label = "FunctionInvocation (calling-line=regs.rax = puts (/*\"invalid right value!\"*/ (const char *) 0x400828);)"];
	Node0x1a857c0 [label = "FunctionInvocation (calling-line=regs.rax = strcmp (/*\"--right\"*/ (const char *) m7fffffffe340_1_64 /*0x7fffffffe575*/, /*\"--right\"*/ (const char *) 0x400807);)"];
	Node0x1abf6c0 [label = "FunctionInvocation (calling-line=regs.rax = puts (/*\"invalid left value!\"*/ (const char *) 0x4007f3);)"];
	Node0x1b5b940 [label = "FunctionInvocation (calling-line=regs.rax = puts (/*\"invalid right value!\"*/ (const char *) 0x400828);)"];
	Node0x1cfc040 [label = "FunctionInvocation (calling-line=regs.rax = puts (/*\"invalid left value!\"*/ (const char *) 0x4007f3);)"];
	Node0 -> Node0x9c1cc0 [label = "signExtend_0x80_0x20 ((rdi_0 & 0xffffffff))
	 > UINT128 (0x0, 0x0, 0x0, 0x4)"];
	Node0x9c1cc0 -> Node0x6eb800 [label = ""];
	Node0 -> Node0x1658c70 [label = "signExtend_0x80_0x20 ((rdi_0 & 0xffffffff))
	 <= UINT128 (0x0, 0x0, 0x0, 0x4)"];
	Node0x1658c70 -> Node0x18df060 [label = ""];
	Node0x6eb800 -> Node0x9fb880 [label = "((rax_1 & 0xffffffff) & (rax_1 & 0xffffffff))
	 == 0"];
	Node0x6eb800 -> Node0x14de2b0 [label = "((rax_1 & 0xffffffff) & (rax_1 & 0xffffffff))
	 != 0"];
	Node0x14de2b0 -> Node0x18df060 [label = ""];
	Node0x18df060 -> Node0x1745fb0 [label = "0x0
	 == 0"];
	Node0x9fb880 -> Node0x6edb90 [label = "(n_v_argv_2_1 & n_v_argv_2_1)
	 == 0"];
	Node0x9fb880 -> Node0x14c6680 [label = "(n_v_argv_2_1 & n_v_argv_2_1)
	 != 0"];
	Node0x14c6680 -> Node0x18df060 [label = ""];
	Node0x6edb90 -> Node0x17b2e40 [label = "signExtend_0x80_0x8 (n_v_argv_2_0)
	 > UINT128 (0x0, 0x0, 0x0, 0x2f)"];
	Node0x6edb90 -> Node0x1cfc040 [label = "signExtend_0x80_0x8 (n_v_argv_2_0)
	 <= UINT128 (0x0, 0x0, 0x0, 0x2f)"];
	Node0x1cfc040 -> Node0x18df060 [label = ""];
	Node0x17b2e40 -> Node0x1a857c0 [label = "signExtend_0x80_0x8 (n_v_argv_2_0)
	 <= UINT128 (0x0, 0x0, 0x0, 0x39)"];
	Node0x1a857c0 -> Node0x179d4b0 [label = ""];
	Node0x17b2e40 -> Node0x1abf6c0 [label = "signExtend_0x80_0x8 (n_v_argv_2_0)
	 > UINT128 (0x0, 0x0, 0x0, 0x39)"];
	Node0x1abf6c0 -> Node0x18df060 [label = ""];
	Node0x179d4b0 -> Node0x189a770 [label = "((rax_2 & 0xffffffff) & (rax_2 & 0xffffffff))
	 == 0"];
	Node0x179d4b0 -> Node0x13fa150 [label = "((rax_2 & 0xffffffff) & (rax_2 & 0xffffffff))
	 != 0"];
	Node0x13fa150 -> Node0x18df060 [label = ""];
	Node0x189a770 -> Node0x8f7de0 [label = "(n_v_argv_4_1 & n_v_argv_4_1)
	 == 0"];
	Node0x189a770 -> Node0x1b5b940 [label = "(n_v_argv_4_1 & n_v_argv_4_1)
	 != 0"];
	Node0x1b5b940 -> Node0x18df060 [label = ""];
	Node0x8f7de0 -> Node0x9f2cd0 [label = "signExtend_0x80_0x8 (n_v_argv_4_0)
	 > UINT128 (0x0, 0x0, 0x0, 0x2f)"];
	Node0x8f7de0 -> Node0x7f5c40 [label = "signExtend_0x80_0x8 (n_v_argv_4_0)
	 <= UINT128 (0x0, 0x0, 0x0, 0x2f)"];
	Node0x7f5c40 -> Node0x18df060 [label = ""];
	Node0x9f2cd0 -> Node0x1810b20 [label = "signExtend_0x80_0x8 (n_v_argv_4_0)
	 <= UINT128 (0x0, 0x0, 0x0, 0x39)"];
	Node0x9f2cd0 -> Node0x1a45d70 [label = "signExtend_0x80_0x8 (n_v_argv_4_0)
	 > UINT128 (0x0, 0x0, 0x0, 0x39)"];
	Node0x1a45d70 -> Node0x18df060 [label = ""];
	Node0x1810b20 -> Node0x19f5b60 [label = "signExtend_0x80_0x20 (((signExtend_0x20_0x8 (n_v_argv_2_0) - 0x30) & 0xffffffff))
	 < signExtend_0x80_0x20 (((signExtend_0x20_0x8 (n_v_argv_4_0) - 0x30) & 0xffffffff))"];
	Node0x19f5b60 -> Node0x17a0600 [label = ""];
	Node0x1810b20 -> Node0x1854a00 [label = "signExtend_0x80_0x20 (((signExtend_0x20_0x8 (n_v_argv_2_0) - 0x30) & 0xffffffff))
	 >= signExtend_0x80_0x20 (((signExtend_0x20_0x8 (n_v_argv_4_0) - 0x30) & 0xffffffff))"];
	Node0x1854a00 -> Node0x17a0600 [label = ""];
	Node0x17a0600 -> Node0x6fe290 [label = "signExtend_0x80_0x20 ((((signExtend_0x20_0x8 (n_v_argv_4_0) - 0x30) + (signExtend_0x20_0x8 (n_v_argv_2_0) - 0x30)) & 0xffffffff))
	 <= UINT128 (0x0, 0x0, 0x0, 0xf)"];
	Node0x6fe290 -> Node0x1a37b80 [label = ""];
	Node0x17a0600 -> Node0x8f71a0 [label = "signExtend_0x80_0x20 ((((signExtend_0x20_0x8 (n_v_argv_4_0) - 0x30) + (signExtend_0x20_0x8 (n_v_argv_2_0) - 0x30)) & 0xffffffff))
	 > UINT128 (0x0, 0x0, 0x0, 0xf)"];
	Node0x8f71a0 -> Node0x1a37b80 [label = ""];
	Node0x1a37b80 -> Node0x6f1210 [label = "0x0
	 == 0"];
	Node0x6f1210 -> Node0x18df060 [label = ""];
}
