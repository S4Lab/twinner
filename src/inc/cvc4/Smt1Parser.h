/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : ../../../../src/parser/smt1/Smt1.g
 *     -                            On : 2013-12-06 18:07:52
 *     -                for the parser : Smt1ParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser 
Smt1Parser

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pSmt1Parser, which is returned from a call to Smt1ParserNew().
 *
 * The methods in pSmt1Parser are  as follows:
 *
 *  - 
 CVC4::parser::smt1::myExpr
      pSmt1Parser->parseExpr(pSmt1Parser)
 *  - 
 CVC4::Command*
      pSmt1Parser->parseCommand(pSmt1Parser)
 *  - 
 CVC4::Command*
      pSmt1Parser->benchmark(pSmt1Parser)
 *  - 
 CVC4::CommandSequence*
      pSmt1Parser->benchAttributes(pSmt1Parser)
 *  - 
 CVC4::Command*
      pSmt1Parser->benchAttribute(pSmt1Parser)
 *  - 
 void
      pSmt1Parser->annotatedFormula(pSmt1Parser)
 *  - 
 void
      pSmt1Parser->annotatedFormulas(pSmt1Parser)
 *  - 
 void
      pSmt1Parser->builtinOp(pSmt1Parser)
 *  - 
 void
      pSmt1Parser->parameterizedOperator(pSmt1Parser)
 *  - 
 void
      pSmt1Parser->bitVectorOperator(pSmt1Parser)
 *  - 
 void
      pSmt1Parser->predicateName(pSmt1Parser)
 *  - 
 void
      pSmt1Parser->functionName(pSmt1Parser)
 *  - 
 void
      pSmt1Parser->functionSymbol(pSmt1Parser)
 *  - 
 void
      pSmt1Parser->attribute(pSmt1Parser)
 *  - 
 void
      pSmt1Parser->functionDeclaration(pSmt1Parser)
 *  - 
 void
      pSmt1Parser->predicateDeclaration(pSmt1Parser)
 *  - 
 void
      pSmt1Parser->sortDeclaration(pSmt1Parser)
 *  - 
 void
      pSmt1Parser->sortList(pSmt1Parser)
 *  - 
 void
      pSmt1Parser->sortName(pSmt1Parser)
 *  - 
 CVC4::parser::smt1::myType
      pSmt1Parser->sortSymbol(pSmt1Parser)
 *  - 
 void
      pSmt1Parser->status(pSmt1Parser)
 *  - 
 void
      pSmt1Parser->annotation(pSmt1Parser)
 *  - 
 void
      pSmt1Parser->termAnnotation(pSmt1Parser)
 *  - 
 void
      pSmt1Parser->identifier(pSmt1Parser)
 *  - 
 void
      pSmt1Parser->let_identifier(pSmt1Parser)
 *  - 
 void
      pSmt1Parser->flet_identifier(pSmt1Parser)
 *  - 
 void
      pSmt1Parser->userValue(pSmt1Parser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_Smt1Parser_H
#define _Smt1Parser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */


#include <stdint.h>

#include "expr/command.h"
#include "parser/parser.h"
#include "parser/antlr_tracing.h"

namespace CVC4 {
  class Expr;

  namespace parser {
    namespace smt1 {
      /**
       * Just exists to provide the uintptr_t constructor that ANTLR
       * requires.
       */
      struct myExpr : public CVC4::Expr {
        myExpr() : CVC4::Expr() {}
        myExpr(void*) : CVC4::Expr() {}
        myExpr(const Expr& e) : CVC4::Expr(e) {}
        myExpr(const myExpr& e) : CVC4::Expr(e) {}
      };/* struct myExpr */

      /**
       * Just exists to provide the uintptr_t constructor that ANTLR
       * requires.
       */
      struct myType : public CVC4::Type {
        myType() : CVC4::Type() {}
        myType(void*) : CVC4::Type() {}
        myType(const Type& t) : CVC4::Type(t) {}
        myType(const myType& t) : CVC4::Type(t) {}
      };/* struct myType */
    }/* CVC4::parser::smt1 namespace */
  }/* CVC4::parser namespace */
}/* CVC4 namespace */



#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct Smt1Parser_Ctx_struct Smt1Parser, * pSmt1Parser;



/**
 ** This file is part of CVC4.
 ** Copyright (c) 2009-2013  New York University and The University of Iowa
 ** See the file COPYING in the top-level source directory for licensing
 ** information.
 **/


#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for 
Smt1Parser

 */
struct Smt1Parser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;

     CVC4::parser::smt1::myExpr
     (*parseExpr)	(struct Smt1Parser_Ctx_struct * ctx);

     CVC4::Command*
     (*parseCommand)	(struct Smt1Parser_Ctx_struct * ctx);

     CVC4::Command*
     (*benchmark)	(struct Smt1Parser_Ctx_struct * ctx);

     CVC4::CommandSequence*
     (*benchAttributes)	(struct Smt1Parser_Ctx_struct * ctx);

     CVC4::Command*
     (*benchAttribute)	(struct Smt1Parser_Ctx_struct * ctx);

     void
     (*annotatedFormula)	(struct Smt1Parser_Ctx_struct * ctx, CVC4::Expr& expr);

     void
     (*annotatedFormulas)	(struct Smt1Parser_Ctx_struct * ctx, std::vector<CVC4::Expr>& formulas, CVC4::Expr& expr);

     void
     (*builtinOp)	(struct Smt1Parser_Ctx_struct * ctx, CVC4::Kind& kind);

     void
     (*parameterizedOperator)	(struct Smt1Parser_Ctx_struct * ctx, CVC4::Expr& op);

     void
     (*bitVectorOperator)	(struct Smt1Parser_Ctx_struct * ctx, CVC4::Expr& op);

     void
     (*predicateName)	(struct Smt1Parser_Ctx_struct * ctx, std::string& name, CVC4::parser::DeclarationCheck check);

     void
     (*functionName)	(struct Smt1Parser_Ctx_struct * ctx, std::string& name, CVC4::parser::DeclarationCheck check);

     void
     (*functionSymbol)	(struct Smt1Parser_Ctx_struct * ctx, CVC4::Expr& fun);

     void
     (*attribute)	(struct Smt1Parser_Ctx_struct * ctx, std::string& s);

     void
     (*functionDeclaration)	(struct Smt1Parser_Ctx_struct * ctx, CVC4::Command*& smt_command);

     void
     (*predicateDeclaration)	(struct Smt1Parser_Ctx_struct * ctx, CVC4::Command*& smt_command);

     void
     (*sortDeclaration)	(struct Smt1Parser_Ctx_struct * ctx, CVC4::Command*& smt_command);

     void
     (*sortList)	(struct Smt1Parser_Ctx_struct * ctx, std::vector<CVC4::Type>& sorts);

     void
     (*sortName)	(struct Smt1Parser_Ctx_struct * ctx, std::string& name, CVC4::parser::DeclarationCheck check);

     CVC4::parser::smt1::myType
     (*sortSymbol)	(struct Smt1Parser_Ctx_struct * ctx);

     void
     (*status)	(struct Smt1Parser_Ctx_struct * ctx, CVC4::BenchmarkStatus& status);

     void
     (*annotation)	(struct Smt1Parser_Ctx_struct * ctx, CVC4::Command*& smt_command);

     void
     (*termAnnotation)	(struct Smt1Parser_Ctx_struct * ctx, CVC4::Expr& expr);

     void
     (*identifier)	(struct Smt1Parser_Ctx_struct * ctx, std::string& id, CVC4::parser::DeclarationCheck check, CVC4::parser::SymbolType type);

     void
     (*let_identifier)	(struct Smt1Parser_Ctx_struct * ctx, std::string& id, CVC4::parser::DeclarationCheck check);

     void
     (*flet_identifier)	(struct Smt1Parser_Ctx_struct * ctx, std::string& id, CVC4::parser::DeclarationCheck check);

     void
     (*userValue)	(struct Smt1Parser_Ctx_struct * ctx, std::string& s);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct Smt1Parser_Ctx_struct * ctx);
    void	    (*free)   (struct Smt1Parser_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pSmt1Parser Smt1ParserNew         (
pANTLR3_COMMON_TOKEN_STREAM
 instream);
ANTLR3_API pSmt1Parser Smt1ParserNewSSD      (
pANTLR3_COMMON_TOKEN_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
parser
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__100      100
#define T__101      101
#define T__102      102
#define T__103      103
#define T__104      104
#define T__105      105
#define ALPHA      4
#define AMPERSAND_TOK      5
#define AND_TOK      6
#define ASSUMPTION_TOK      7
#define ATTR_IDENTIFIER      8
#define AT_TOK      9
#define BENCHMARK_TOK      10
#define BITVECTOR1_BV_CONST      11
#define BITVECTOR_BV_CONST      12
#define BITVECTOR_TOK      13
#define BVADD_TOK      14
#define BVAND_TOK      15
#define BVASHR_TOK      16
#define BVCOMP_TOK      17
#define BVLSHR_TOK      18
#define BVMUL_TOK      19
#define BVNAND_TOK      20
#define BVNEG_TOK      21
#define BVNOR_TOK      22
#define BVNOT_TOK      23
#define BVOR_TOK      24
#define BVSDIV_TOK      25
#define BVSGE_TOK      26
#define BVSGT_TOK      27
#define BVSHL_TOK      28
#define BVSLE_TOK      29
#define BVSLT_TOK      30
#define BVSMOD_TOK      31
#define BVSREM_TOK      32
#define BVSUB_TOK      33
#define BVUDIV_TOK      34
#define BVUGE_TOK      35
#define BVUGT_TOK      36
#define BVULE_TOK      37
#define BVULT_TOK      38
#define BVUREM_TOK      39
#define BVXNOR_TOK      40
#define BVXOR_TOK      41
#define COMMENT      42
#define CONCAT_TOK      43
#define DIGIT      44
#define DISTINCT_TOK      45
#define DIV_TOK      46
#define EQUAL_TOK      47
#define ESCAPE      48
#define EXISTS_TOK      49
#define EXTRACT_TOK      50
#define EXTRAFUNS_TOK      51
#define EXTRAPREDS_TOK      52
#define EXTRASORTS_TOK      53
#define FALSE_TOK      54
#define FLET_IDENTIFIER      55
#define FLET_TOK      56
#define FORALL_TOK      57
#define FORMULA_TOK      58
#define GREATER_THAN_TOK      59
#define IDENTIFIER      60
#define IFF_TOK      61
#define IMPLIES_TOK      62
#define ITE_TOK      63
#define LESS_THAN_TOK      64
#define LET_IDENTIFIER      65
#define LET_TOK      66
#define LOGIC_TOK      67
#define LPAREN_TOK      68
#define MINUS_TOK      69
#define NOTES_TOK      70
#define NOT_TOK      71
#define NUMERAL_TOK      72
#define OR_TOK      73
#define PATTERN_ANNOTATION_BEGIN      74
#define PERCENT_TOK      75
#define PIPE_TOK      76
#define PLUS_TOK      77
#define POUND_TOK      78
#define RATIONAL_TOK      79
#define REPEAT_TOK      80
#define ROTATE_LEFT_TOK      81
#define ROTATE_RIGHT_TOK      82
#define RPAREN_TOK      83
#define SAT_TOK      84
#define SELECT_TOK      85
#define SIGN_EXTEND_TOK      86
#define STAR_TOK      87
#define STATUS_TOK      88
#define STORE_TOK      89
#define STRING_LITERAL      90
#define THEORY_TOK      91
#define TILDE_TOK      92
#define TRUE_TOK      93
#define UNKNOWN_TOK      94
#define UNSAT_TOK      95
#define USER_VALUE      96
#define WHITESPACE      97
#define XOR_TOK      98
#define ZERO_EXTEND_TOK      99
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for Smt1Parser
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
