/*********************                                                        */
/** options.h
 **
 ** Copyright 2011-2013  New York University and The University of Iowa,
 ** and as below.
 **
 ** This file automatically generated by:
 **
 **     ../../../src/options/mkoptions ../../../src/options/base_options_template.h ../theory/quantifiers/options.h
 **
 ** for the CVC4 project.
 **/

/* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT ! */
/* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT ! */
/* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT ! */
/* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT ! */
/* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT ! */
/* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT ! */

/* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT ! */
/* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT ! */
/* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT ! */
/* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT ! */
/* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT ! */
/* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT ! */

/* Edit the template file instead.                     */

/*********************                                                        */
/*! \file base_options_template.h
 ** \verbatim
 ** Original author: Morgan Deters
 ** Major contributors: none
 ** Minor contributors (to current version): none
 ** This file is part of the CVC4 project.
 ** Copyright (c) 2009-2013  New York University and The University of Iowa
 ** See the file COPYING in the top-level source directory for licensing
 ** information.\endverbatim
 **
 ** \brief Contains code for handling command-line options.
 **
 ** Contains code for handling command-line options
 **/

#include <cvc4/cvc4_public.h>

#ifndef __CVC4__OPTIONS__QUANTIFIERS_H
#define __CVC4__OPTIONS__QUANTIFIERS_H

#include <cvc4/options/options.h>

#line 70 "../../../src/options/../theory/quantifiers/options"
#include <cvc4/theory/quantifiers/modes.h>
#line 76 "../../../src/options/../theory/quantifiers/options"
#include <cvc4/theory/quantifiers/modes.h>
#line 131 "../../../src/options/../theory/quantifiers/options"
#include <cvc4/theory/quantifiers/modes.h>

#line 26 "../../../src/options/base_options_template.h"

#define CVC4_OPTIONS__QUANTIFIERS__FOR_OPTION_HOLDER \
  miniscopeQuant__option_t::type miniscopeQuant; \
  bool miniscopeQuant__setByUser__; \
  miniscopeQuantFreeVar__option_t::type miniscopeQuantFreeVar; \
  bool miniscopeQuantFreeVar__setByUser__; \
  prenexQuant__option_t::type prenexQuant; \
  bool prenexQuant__setByUser__; \
  varElimQuant__option_t::type varElimQuant; \
  bool varElimQuant__setByUser__; \
  simpleIteLiftQuant__option_t::type simpleIteLiftQuant; \
  bool simpleIteLiftQuant__setByUser__; \
  cnfQuant__option_t::type cnfQuant; \
  bool cnfQuant__setByUser__; \
  clauseSplit__option_t::type clauseSplit; \
  bool clauseSplit__setByUser__; \
  preSkolemQuant__option_t::type preSkolemQuant; \
  bool preSkolemQuant__setByUser__; \
  iteRemoveQuant__option_t::type iteRemoveQuant; \
  bool iteRemoveQuant__setByUser__; \
  aggressiveMiniscopeQuant__option_t::type aggressiveMiniscopeQuant; \
  bool aggressiveMiniscopeQuant__setByUser__; \
  macrosQuant__option_t::type macrosQuant; \
  bool macrosQuant__setByUser__; \
  foPropQuant__option_t::type foPropQuant; \
  bool foPropQuant__setByUser__; \
  smartTriggers__option_t::type smartTriggers; \
  bool smartTriggers__setByUser__; \
  relevantTriggers__option_t::type relevantTriggers; \
  bool relevantTriggers__setByUser__; \
  relationalTriggers__option_t::type relationalTriggers; \
  bool relationalTriggers__setByUser__; \
  registerQuantBodyTerms__option_t::type registerQuantBodyTerms; \
  bool registerQuantBodyTerms__setByUser__; \
  instWhenMode__option_t::type instWhenMode; \
  bool instWhenMode__setByUser__; \
  eagerInstQuant__option_t::type eagerInstQuant; \
  bool eagerInstQuant__setByUser__; \
  literalMatchMode__option_t::type literalMatchMode; \
  bool literalMatchMode__setByUser__; \
  cbqi__option_t::type cbqi; \
  bool cbqi__setByUser__; \
  recurseCbqi__option_t::type recurseCbqi; \
  bool recurseCbqi__setByUser__; \
  userPatternsQuant__option_t::type userPatternsQuant; \
  bool userPatternsQuant__setByUser__; \
  flipDecision__option_t::type flipDecision; \
  bool flipDecision__setByUser__; \
  internalReps__option_t::type internalReps; \
  bool internalReps__setByUser__; \
  finiteModelFind__option_t::type finiteModelFind; \
  bool finiteModelFind__setByUser__; \
  fmfModelBasedInst__option_t::type fmfModelBasedInst; \
  bool fmfModelBasedInst__setByUser__; \
  fmfFullModelCheck__option_t::type fmfFullModelCheck; \
  bool fmfFullModelCheck__setByUser__; \
  fmfFmcSimple__option_t::type fmfFmcSimple; \
  bool fmfFmcSimple__setByUser__; \
  fmfFmcCoverSimplify__option_t::type fmfFmcCoverSimplify; \
  bool fmfFmcCoverSimplify__setByUser__; \
  fmfFmcInterval__option_t::type fmfFmcInterval; \
  bool fmfFmcInterval__setByUser__; \
  fmfOneInstPerRound__option_t::type fmfOneInstPerRound; \
  bool fmfOneInstPerRound__setByUser__; \
  fmfOneQuantPerRound__option_t::type fmfOneQuantPerRound; \
  bool fmfOneQuantPerRound__setByUser__; \
  fmfInstEngine__option_t::type fmfInstEngine; \
  bool fmfInstEngine__setByUser__; \
  fmfRelevantDomain__option_t::type fmfRelevantDomain; \
  bool fmfRelevantDomain__setByUser__; \
  fmfNewInstGen__option_t::type fmfNewInstGen; \
  bool fmfNewInstGen__setByUser__; \
  fmfInstGen__option_t::type fmfInstGen; \
  bool fmfInstGen__setByUser__; \
  fmfInstGenOneQuantPerRound__option_t::type fmfInstGenOneQuantPerRound; \
  bool fmfInstGenOneQuantPerRound__setByUser__; \
  fmfFreshDistConst__option_t::type fmfFreshDistConst; \
  bool fmfFreshDistConst__setByUser__; \
  fmfBoundInt__option_t::type fmfBoundInt; \
  bool fmfBoundInt__setByUser__; \
  axiomInstMode__option_t::type axiomInstMode; \
  bool axiomInstMode__setByUser__;

#line 30 "../../../src/options/base_options_template.h"

namespace CVC4 {

namespace options {


#line 11 "../../../src/options/../theory/quantifiers/options"
extern struct CVC4_PUBLIC miniscopeQuant__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; } miniscopeQuant CVC4_PUBLIC;
#line 17 "../../../src/options/../theory/quantifiers/options"
extern struct CVC4_PUBLIC miniscopeQuantFreeVar__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; } miniscopeQuantFreeVar CVC4_PUBLIC;
#line 21 "../../../src/options/../theory/quantifiers/options"
extern struct CVC4_PUBLIC prenexQuant__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; } prenexQuant CVC4_PUBLIC;
#line 27 "../../../src/options/../theory/quantifiers/options"
extern struct CVC4_PUBLIC varElimQuant__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; } varElimQuant CVC4_PUBLIC;
#line 30 "../../../src/options/../theory/quantifiers/options"
extern struct CVC4_PUBLIC simpleIteLiftQuant__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; } simpleIteLiftQuant CVC4_PUBLIC;
#line 34 "../../../src/options/../theory/quantifiers/options"
extern struct CVC4_PUBLIC cnfQuant__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; } cnfQuant CVC4_PUBLIC;
#line 37 "../../../src/options/../theory/quantifiers/options"
extern struct CVC4_PUBLIC clauseSplit__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; } clauseSplit CVC4_PUBLIC;
#line 43 "../../../src/options/../theory/quantifiers/options"
extern struct CVC4_PUBLIC preSkolemQuant__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; } preSkolemQuant CVC4_PUBLIC;
#line 45 "../../../src/options/../theory/quantifiers/options"
extern struct CVC4_PUBLIC iteRemoveQuant__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; } iteRemoveQuant CVC4_PUBLIC;
#line 48 "../../../src/options/../theory/quantifiers/options"
extern struct CVC4_PUBLIC aggressiveMiniscopeQuant__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; } aggressiveMiniscopeQuant CVC4_PUBLIC;
#line 51 "../../../src/options/../theory/quantifiers/options"
extern struct CVC4_PUBLIC macrosQuant__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; } macrosQuant CVC4_PUBLIC;
#line 54 "../../../src/options/../theory/quantifiers/options"
extern struct CVC4_PUBLIC foPropQuant__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; } foPropQuant CVC4_PUBLIC;
#line 58 "../../../src/options/../theory/quantifiers/options"
extern struct CVC4_PUBLIC smartTriggers__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; } smartTriggers CVC4_PUBLIC;
#line 61 "../../../src/options/../theory/quantifiers/options"
extern struct CVC4_PUBLIC relevantTriggers__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; } relevantTriggers CVC4_PUBLIC;
#line 63 "../../../src/options/../theory/quantifiers/options"
extern struct CVC4_PUBLIC relationalTriggers__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; } relationalTriggers CVC4_PUBLIC;
#line 67 "../../../src/options/../theory/quantifiers/options"
extern struct CVC4_PUBLIC registerQuantBodyTerms__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; } registerQuantBodyTerms CVC4_PUBLIC;
#line 70 "../../../src/options/../theory/quantifiers/options"
extern struct CVC4_PUBLIC instWhenMode__option_t { typedef CVC4::theory::quantifiers::InstWhenMode type; type operator()() const; bool wasSetByUser() const; void set(const type& v); } instWhenMode CVC4_PUBLIC;
#line 73 "../../../src/options/../theory/quantifiers/options"
extern struct CVC4_PUBLIC eagerInstQuant__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; } eagerInstQuant CVC4_PUBLIC;
#line 76 "../../../src/options/../theory/quantifiers/options"
extern struct CVC4_PUBLIC literalMatchMode__option_t { typedef CVC4::theory::quantifiers::LiteralMatchMode type; type operator()() const; bool wasSetByUser() const; } literalMatchMode CVC4_PUBLIC;
#line 79 "../../../src/options/../theory/quantifiers/options"
extern struct CVC4_PUBLIC cbqi__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; } cbqi CVC4_PUBLIC;
#line 83 "../../../src/options/../theory/quantifiers/options"
extern struct CVC4_PUBLIC recurseCbqi__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; } recurseCbqi CVC4_PUBLIC;
#line 86 "../../../src/options/../theory/quantifiers/options"
extern struct CVC4_PUBLIC userPatternsQuant__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; } userPatternsQuant CVC4_PUBLIC;
#line 89 "../../../src/options/../theory/quantifiers/options"
extern struct CVC4_PUBLIC flipDecision__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; } flipDecision CVC4_PUBLIC;
#line 92 "../../../src/options/../theory/quantifiers/options"
extern struct CVC4_PUBLIC internalReps__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; } internalReps CVC4_PUBLIC;
#line 95 "../../../src/options/../theory/quantifiers/options"
extern struct CVC4_PUBLIC finiteModelFind__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; } finiteModelFind CVC4_PUBLIC;
#line 98 "../../../src/options/../theory/quantifiers/options"
extern struct CVC4_PUBLIC fmfModelBasedInst__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; } fmfModelBasedInst CVC4_PUBLIC;
#line 101 "../../../src/options/../theory/quantifiers/options"
extern struct CVC4_PUBLIC fmfFullModelCheck__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; void set(const type& v); } fmfFullModelCheck CVC4_PUBLIC;
#line 103 "../../../src/options/../theory/quantifiers/options"
extern struct CVC4_PUBLIC fmfFmcSimple__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; } fmfFmcSimple CVC4_PUBLIC;
#line 105 "../../../src/options/../theory/quantifiers/options"
extern struct CVC4_PUBLIC fmfFmcCoverSimplify__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; } fmfFmcCoverSimplify CVC4_PUBLIC;
#line 107 "../../../src/options/../theory/quantifiers/options"
extern struct CVC4_PUBLIC fmfFmcInterval__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; } fmfFmcInterval CVC4_PUBLIC;
#line 110 "../../../src/options/../theory/quantifiers/options"
extern struct CVC4_PUBLIC fmfOneInstPerRound__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; } fmfOneInstPerRound CVC4_PUBLIC;
#line 112 "../../../src/options/../theory/quantifiers/options"
extern struct CVC4_PUBLIC fmfOneQuantPerRound__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; } fmfOneQuantPerRound CVC4_PUBLIC;
#line 114 "../../../src/options/../theory/quantifiers/options"
extern struct CVC4_PUBLIC fmfInstEngine__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; } fmfInstEngine CVC4_PUBLIC;
#line 116 "../../../src/options/../theory/quantifiers/options"
extern struct CVC4_PUBLIC fmfRelevantDomain__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; } fmfRelevantDomain CVC4_PUBLIC;
#line 118 "../../../src/options/../theory/quantifiers/options"
extern struct CVC4_PUBLIC fmfNewInstGen__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; } fmfNewInstGen CVC4_PUBLIC;
#line 120 "../../../src/options/../theory/quantifiers/options"
extern struct CVC4_PUBLIC fmfInstGen__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; void set(const type& v); } fmfInstGen CVC4_PUBLIC;
#line 123 "../../../src/options/../theory/quantifiers/options"
extern struct CVC4_PUBLIC fmfInstGenOneQuantPerRound__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; } fmfInstGenOneQuantPerRound CVC4_PUBLIC;
#line 125 "../../../src/options/../theory/quantifiers/options"
extern struct CVC4_PUBLIC fmfFreshDistConst__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; } fmfFreshDistConst CVC4_PUBLIC;
#line 128 "../../../src/options/../theory/quantifiers/options"
extern struct CVC4_PUBLIC fmfBoundInt__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; } fmfBoundInt CVC4_PUBLIC;
#line 131 "../../../src/options/../theory/quantifiers/options"
extern struct CVC4_PUBLIC axiomInstMode__option_t { typedef CVC4::theory::quantifiers::AxiomInstMode type; type operator()() const; bool wasSetByUser() const; } axiomInstMode CVC4_PUBLIC;

#line 38 "../../../src/options/base_options_template.h"

}/* CVC4::options namespace */


#line 11 "../../../src/options/../theory/quantifiers/options"
template <> const options::miniscopeQuant__option_t::type& Options::operator[](options::miniscopeQuant__option_t) const;
#line 11 "../../../src/options/../theory/quantifiers/options"
template <> bool Options::wasSetByUser(options::miniscopeQuant__option_t) const;
#line 11 "../../../src/options/../theory/quantifiers/options"
template <> void Options::assignBool(options::miniscopeQuant__option_t, std::string option, bool value, SmtEngine* smt);
#line 17 "../../../src/options/../theory/quantifiers/options"
template <> const options::miniscopeQuantFreeVar__option_t::type& Options::operator[](options::miniscopeQuantFreeVar__option_t) const;
#line 17 "../../../src/options/../theory/quantifiers/options"
template <> bool Options::wasSetByUser(options::miniscopeQuantFreeVar__option_t) const;
#line 17 "../../../src/options/../theory/quantifiers/options"
template <> void Options::assignBool(options::miniscopeQuantFreeVar__option_t, std::string option, bool value, SmtEngine* smt);
#line 21 "../../../src/options/../theory/quantifiers/options"
template <> const options::prenexQuant__option_t::type& Options::operator[](options::prenexQuant__option_t) const;
#line 21 "../../../src/options/../theory/quantifiers/options"
template <> bool Options::wasSetByUser(options::prenexQuant__option_t) const;
#line 21 "../../../src/options/../theory/quantifiers/options"
template <> void Options::assignBool(options::prenexQuant__option_t, std::string option, bool value, SmtEngine* smt);
#line 27 "../../../src/options/../theory/quantifiers/options"
template <> const options::varElimQuant__option_t::type& Options::operator[](options::varElimQuant__option_t) const;
#line 27 "../../../src/options/../theory/quantifiers/options"
template <> bool Options::wasSetByUser(options::varElimQuant__option_t) const;
#line 27 "../../../src/options/../theory/quantifiers/options"
template <> void Options::assignBool(options::varElimQuant__option_t, std::string option, bool value, SmtEngine* smt);
#line 30 "../../../src/options/../theory/quantifiers/options"
template <> const options::simpleIteLiftQuant__option_t::type& Options::operator[](options::simpleIteLiftQuant__option_t) const;
#line 30 "../../../src/options/../theory/quantifiers/options"
template <> bool Options::wasSetByUser(options::simpleIteLiftQuant__option_t) const;
#line 30 "../../../src/options/../theory/quantifiers/options"
template <> void Options::assignBool(options::simpleIteLiftQuant__option_t, std::string option, bool value, SmtEngine* smt);
#line 34 "../../../src/options/../theory/quantifiers/options"
template <> const options::cnfQuant__option_t::type& Options::operator[](options::cnfQuant__option_t) const;
#line 34 "../../../src/options/../theory/quantifiers/options"
template <> bool Options::wasSetByUser(options::cnfQuant__option_t) const;
#line 34 "../../../src/options/../theory/quantifiers/options"
template <> void Options::assignBool(options::cnfQuant__option_t, std::string option, bool value, SmtEngine* smt);
#line 37 "../../../src/options/../theory/quantifiers/options"
template <> const options::clauseSplit__option_t::type& Options::operator[](options::clauseSplit__option_t) const;
#line 37 "../../../src/options/../theory/quantifiers/options"
template <> bool Options::wasSetByUser(options::clauseSplit__option_t) const;
#line 37 "../../../src/options/../theory/quantifiers/options"
template <> void Options::assignBool(options::clauseSplit__option_t, std::string option, bool value, SmtEngine* smt);
#line 43 "../../../src/options/../theory/quantifiers/options"
template <> const options::preSkolemQuant__option_t::type& Options::operator[](options::preSkolemQuant__option_t) const;
#line 43 "../../../src/options/../theory/quantifiers/options"
template <> bool Options::wasSetByUser(options::preSkolemQuant__option_t) const;
#line 43 "../../../src/options/../theory/quantifiers/options"
template <> void Options::assignBool(options::preSkolemQuant__option_t, std::string option, bool value, SmtEngine* smt);
#line 45 "../../../src/options/../theory/quantifiers/options"
template <> const options::iteRemoveQuant__option_t::type& Options::operator[](options::iteRemoveQuant__option_t) const;
#line 45 "../../../src/options/../theory/quantifiers/options"
template <> bool Options::wasSetByUser(options::iteRemoveQuant__option_t) const;
#line 45 "../../../src/options/../theory/quantifiers/options"
template <> void Options::assignBool(options::iteRemoveQuant__option_t, std::string option, bool value, SmtEngine* smt);
#line 48 "../../../src/options/../theory/quantifiers/options"
template <> const options::aggressiveMiniscopeQuant__option_t::type& Options::operator[](options::aggressiveMiniscopeQuant__option_t) const;
#line 48 "../../../src/options/../theory/quantifiers/options"
template <> bool Options::wasSetByUser(options::aggressiveMiniscopeQuant__option_t) const;
#line 48 "../../../src/options/../theory/quantifiers/options"
template <> void Options::assignBool(options::aggressiveMiniscopeQuant__option_t, std::string option, bool value, SmtEngine* smt);
#line 51 "../../../src/options/../theory/quantifiers/options"
template <> const options::macrosQuant__option_t::type& Options::operator[](options::macrosQuant__option_t) const;
#line 51 "../../../src/options/../theory/quantifiers/options"
template <> bool Options::wasSetByUser(options::macrosQuant__option_t) const;
#line 51 "../../../src/options/../theory/quantifiers/options"
template <> void Options::assignBool(options::macrosQuant__option_t, std::string option, bool value, SmtEngine* smt);
#line 54 "../../../src/options/../theory/quantifiers/options"
template <> const options::foPropQuant__option_t::type& Options::operator[](options::foPropQuant__option_t) const;
#line 54 "../../../src/options/../theory/quantifiers/options"
template <> bool Options::wasSetByUser(options::foPropQuant__option_t) const;
#line 54 "../../../src/options/../theory/quantifiers/options"
template <> void Options::assignBool(options::foPropQuant__option_t, std::string option, bool value, SmtEngine* smt);
#line 58 "../../../src/options/../theory/quantifiers/options"
template <> const options::smartTriggers__option_t::type& Options::operator[](options::smartTriggers__option_t) const;
#line 58 "../../../src/options/../theory/quantifiers/options"
template <> bool Options::wasSetByUser(options::smartTriggers__option_t) const;
#line 58 "../../../src/options/../theory/quantifiers/options"
template <> void Options::assignBool(options::smartTriggers__option_t, std::string option, bool value, SmtEngine* smt);
#line 61 "../../../src/options/../theory/quantifiers/options"
template <> const options::relevantTriggers__option_t::type& Options::operator[](options::relevantTriggers__option_t) const;
#line 61 "../../../src/options/../theory/quantifiers/options"
template <> bool Options::wasSetByUser(options::relevantTriggers__option_t) const;
#line 61 "../../../src/options/../theory/quantifiers/options"
template <> void Options::assignBool(options::relevantTriggers__option_t, std::string option, bool value, SmtEngine* smt);
#line 63 "../../../src/options/../theory/quantifiers/options"
template <> const options::relationalTriggers__option_t::type& Options::operator[](options::relationalTriggers__option_t) const;
#line 63 "../../../src/options/../theory/quantifiers/options"
template <> bool Options::wasSetByUser(options::relationalTriggers__option_t) const;
#line 63 "../../../src/options/../theory/quantifiers/options"
template <> void Options::assignBool(options::relationalTriggers__option_t, std::string option, bool value, SmtEngine* smt);
#line 67 "../../../src/options/../theory/quantifiers/options"
template <> const options::registerQuantBodyTerms__option_t::type& Options::operator[](options::registerQuantBodyTerms__option_t) const;
#line 67 "../../../src/options/../theory/quantifiers/options"
template <> bool Options::wasSetByUser(options::registerQuantBodyTerms__option_t) const;
#line 67 "../../../src/options/../theory/quantifiers/options"
template <> void Options::assignBool(options::registerQuantBodyTerms__option_t, std::string option, bool value, SmtEngine* smt);
#line 70 "../../../src/options/../theory/quantifiers/options"
template <> void Options::set(options::instWhenMode__option_t, const options::instWhenMode__option_t::type& x);
#line 70 "../../../src/options/../theory/quantifiers/options"
template <> const options::instWhenMode__option_t::type& Options::operator[](options::instWhenMode__option_t) const;
#line 70 "../../../src/options/../theory/quantifiers/options"
template <> bool Options::wasSetByUser(options::instWhenMode__option_t) const;
#line 70 "../../../src/options/../theory/quantifiers/options"
template <> void Options::assign(options::instWhenMode__option_t, std::string option, std::string value, SmtEngine* smt);
#line 73 "../../../src/options/../theory/quantifiers/options"
template <> const options::eagerInstQuant__option_t::type& Options::operator[](options::eagerInstQuant__option_t) const;
#line 73 "../../../src/options/../theory/quantifiers/options"
template <> bool Options::wasSetByUser(options::eagerInstQuant__option_t) const;
#line 73 "../../../src/options/../theory/quantifiers/options"
template <> void Options::assignBool(options::eagerInstQuant__option_t, std::string option, bool value, SmtEngine* smt);
#line 76 "../../../src/options/../theory/quantifiers/options"
template <> const options::literalMatchMode__option_t::type& Options::operator[](options::literalMatchMode__option_t) const;
#line 76 "../../../src/options/../theory/quantifiers/options"
template <> bool Options::wasSetByUser(options::literalMatchMode__option_t) const;
#line 76 "../../../src/options/../theory/quantifiers/options"
template <> void Options::assign(options::literalMatchMode__option_t, std::string option, std::string value, SmtEngine* smt);
#line 79 "../../../src/options/../theory/quantifiers/options"
template <> const options::cbqi__option_t::type& Options::operator[](options::cbqi__option_t) const;
#line 79 "../../../src/options/../theory/quantifiers/options"
template <> bool Options::wasSetByUser(options::cbqi__option_t) const;
#line 79 "../../../src/options/../theory/quantifiers/options"
template <> void Options::assignBool(options::cbqi__option_t, std::string option, bool value, SmtEngine* smt);
#line 83 "../../../src/options/../theory/quantifiers/options"
template <> const options::recurseCbqi__option_t::type& Options::operator[](options::recurseCbqi__option_t) const;
#line 83 "../../../src/options/../theory/quantifiers/options"
template <> bool Options::wasSetByUser(options::recurseCbqi__option_t) const;
#line 83 "../../../src/options/../theory/quantifiers/options"
template <> void Options::assignBool(options::recurseCbqi__option_t, std::string option, bool value, SmtEngine* smt);
#line 86 "../../../src/options/../theory/quantifiers/options"
template <> const options::userPatternsQuant__option_t::type& Options::operator[](options::userPatternsQuant__option_t) const;
#line 86 "../../../src/options/../theory/quantifiers/options"
template <> bool Options::wasSetByUser(options::userPatternsQuant__option_t) const;
#line 86 "../../../src/options/../theory/quantifiers/options"
template <> void Options::assignBool(options::userPatternsQuant__option_t, std::string option, bool value, SmtEngine* smt);
#line 89 "../../../src/options/../theory/quantifiers/options"
template <> const options::flipDecision__option_t::type& Options::operator[](options::flipDecision__option_t) const;
#line 89 "../../../src/options/../theory/quantifiers/options"
template <> bool Options::wasSetByUser(options::flipDecision__option_t) const;
#line 89 "../../../src/options/../theory/quantifiers/options"
template <> void Options::assignBool(options::flipDecision__option_t, std::string option, bool value, SmtEngine* smt);
#line 92 "../../../src/options/../theory/quantifiers/options"
template <> const options::internalReps__option_t::type& Options::operator[](options::internalReps__option_t) const;
#line 92 "../../../src/options/../theory/quantifiers/options"
template <> bool Options::wasSetByUser(options::internalReps__option_t) const;
#line 92 "../../../src/options/../theory/quantifiers/options"
template <> void Options::assignBool(options::internalReps__option_t, std::string option, bool value, SmtEngine* smt);
#line 95 "../../../src/options/../theory/quantifiers/options"
template <> const options::finiteModelFind__option_t::type& Options::operator[](options::finiteModelFind__option_t) const;
#line 95 "../../../src/options/../theory/quantifiers/options"
template <> bool Options::wasSetByUser(options::finiteModelFind__option_t) const;
#line 95 "../../../src/options/../theory/quantifiers/options"
template <> void Options::assignBool(options::finiteModelFind__option_t, std::string option, bool value, SmtEngine* smt);
#line 98 "../../../src/options/../theory/quantifiers/options"
template <> const options::fmfModelBasedInst__option_t::type& Options::operator[](options::fmfModelBasedInst__option_t) const;
#line 98 "../../../src/options/../theory/quantifiers/options"
template <> bool Options::wasSetByUser(options::fmfModelBasedInst__option_t) const;
#line 98 "../../../src/options/../theory/quantifiers/options"
template <> void Options::assignBool(options::fmfModelBasedInst__option_t, std::string option, bool value, SmtEngine* smt);
#line 101 "../../../src/options/../theory/quantifiers/options"
template <> void Options::set(options::fmfFullModelCheck__option_t, const options::fmfFullModelCheck__option_t::type& x);
#line 101 "../../../src/options/../theory/quantifiers/options"
template <> const options::fmfFullModelCheck__option_t::type& Options::operator[](options::fmfFullModelCheck__option_t) const;
#line 101 "../../../src/options/../theory/quantifiers/options"
template <> bool Options::wasSetByUser(options::fmfFullModelCheck__option_t) const;
#line 101 "../../../src/options/../theory/quantifiers/options"
template <> void Options::assignBool(options::fmfFullModelCheck__option_t, std::string option, bool value, SmtEngine* smt);
#line 103 "../../../src/options/../theory/quantifiers/options"
template <> const options::fmfFmcSimple__option_t::type& Options::operator[](options::fmfFmcSimple__option_t) const;
#line 103 "../../../src/options/../theory/quantifiers/options"
template <> bool Options::wasSetByUser(options::fmfFmcSimple__option_t) const;
#line 103 "../../../src/options/../theory/quantifiers/options"
template <> void Options::assignBool(options::fmfFmcSimple__option_t, std::string option, bool value, SmtEngine* smt);
#line 105 "../../../src/options/../theory/quantifiers/options"
template <> const options::fmfFmcCoverSimplify__option_t::type& Options::operator[](options::fmfFmcCoverSimplify__option_t) const;
#line 105 "../../../src/options/../theory/quantifiers/options"
template <> bool Options::wasSetByUser(options::fmfFmcCoverSimplify__option_t) const;
#line 105 "../../../src/options/../theory/quantifiers/options"
template <> void Options::assignBool(options::fmfFmcCoverSimplify__option_t, std::string option, bool value, SmtEngine* smt);
#line 107 "../../../src/options/../theory/quantifiers/options"
template <> const options::fmfFmcInterval__option_t::type& Options::operator[](options::fmfFmcInterval__option_t) const;
#line 107 "../../../src/options/../theory/quantifiers/options"
template <> bool Options::wasSetByUser(options::fmfFmcInterval__option_t) const;
#line 107 "../../../src/options/../theory/quantifiers/options"
template <> void Options::assignBool(options::fmfFmcInterval__option_t, std::string option, bool value, SmtEngine* smt);
#line 110 "../../../src/options/../theory/quantifiers/options"
template <> const options::fmfOneInstPerRound__option_t::type& Options::operator[](options::fmfOneInstPerRound__option_t) const;
#line 110 "../../../src/options/../theory/quantifiers/options"
template <> bool Options::wasSetByUser(options::fmfOneInstPerRound__option_t) const;
#line 110 "../../../src/options/../theory/quantifiers/options"
template <> void Options::assignBool(options::fmfOneInstPerRound__option_t, std::string option, bool value, SmtEngine* smt);
#line 112 "../../../src/options/../theory/quantifiers/options"
template <> const options::fmfOneQuantPerRound__option_t::type& Options::operator[](options::fmfOneQuantPerRound__option_t) const;
#line 112 "../../../src/options/../theory/quantifiers/options"
template <> bool Options::wasSetByUser(options::fmfOneQuantPerRound__option_t) const;
#line 112 "../../../src/options/../theory/quantifiers/options"
template <> void Options::assignBool(options::fmfOneQuantPerRound__option_t, std::string option, bool value, SmtEngine* smt);
#line 114 "../../../src/options/../theory/quantifiers/options"
template <> const options::fmfInstEngine__option_t::type& Options::operator[](options::fmfInstEngine__option_t) const;
#line 114 "../../../src/options/../theory/quantifiers/options"
template <> bool Options::wasSetByUser(options::fmfInstEngine__option_t) const;
#line 114 "../../../src/options/../theory/quantifiers/options"
template <> void Options::assignBool(options::fmfInstEngine__option_t, std::string option, bool value, SmtEngine* smt);
#line 116 "../../../src/options/../theory/quantifiers/options"
template <> const options::fmfRelevantDomain__option_t::type& Options::operator[](options::fmfRelevantDomain__option_t) const;
#line 116 "../../../src/options/../theory/quantifiers/options"
template <> bool Options::wasSetByUser(options::fmfRelevantDomain__option_t) const;
#line 116 "../../../src/options/../theory/quantifiers/options"
template <> void Options::assignBool(options::fmfRelevantDomain__option_t, std::string option, bool value, SmtEngine* smt);
#line 118 "../../../src/options/../theory/quantifiers/options"
template <> const options::fmfNewInstGen__option_t::type& Options::operator[](options::fmfNewInstGen__option_t) const;
#line 118 "../../../src/options/../theory/quantifiers/options"
template <> bool Options::wasSetByUser(options::fmfNewInstGen__option_t) const;
#line 118 "../../../src/options/../theory/quantifiers/options"
template <> void Options::assignBool(options::fmfNewInstGen__option_t, std::string option, bool value, SmtEngine* smt);
#line 120 "../../../src/options/../theory/quantifiers/options"
template <> void Options::set(options::fmfInstGen__option_t, const options::fmfInstGen__option_t::type& x);
#line 120 "../../../src/options/../theory/quantifiers/options"
template <> const options::fmfInstGen__option_t::type& Options::operator[](options::fmfInstGen__option_t) const;
#line 120 "../../../src/options/../theory/quantifiers/options"
template <> bool Options::wasSetByUser(options::fmfInstGen__option_t) const;
#line 120 "../../../src/options/../theory/quantifiers/options"
template <> void Options::assignBool(options::fmfInstGen__option_t, std::string option, bool value, SmtEngine* smt);
#line 123 "../../../src/options/../theory/quantifiers/options"
template <> const options::fmfInstGenOneQuantPerRound__option_t::type& Options::operator[](options::fmfInstGenOneQuantPerRound__option_t) const;
#line 123 "../../../src/options/../theory/quantifiers/options"
template <> bool Options::wasSetByUser(options::fmfInstGenOneQuantPerRound__option_t) const;
#line 123 "../../../src/options/../theory/quantifiers/options"
template <> void Options::assignBool(options::fmfInstGenOneQuantPerRound__option_t, std::string option, bool value, SmtEngine* smt);
#line 125 "../../../src/options/../theory/quantifiers/options"
template <> const options::fmfFreshDistConst__option_t::type& Options::operator[](options::fmfFreshDistConst__option_t) const;
#line 125 "../../../src/options/../theory/quantifiers/options"
template <> bool Options::wasSetByUser(options::fmfFreshDistConst__option_t) const;
#line 125 "../../../src/options/../theory/quantifiers/options"
template <> void Options::assignBool(options::fmfFreshDistConst__option_t, std::string option, bool value, SmtEngine* smt);
#line 128 "../../../src/options/../theory/quantifiers/options"
template <> const options::fmfBoundInt__option_t::type& Options::operator[](options::fmfBoundInt__option_t) const;
#line 128 "../../../src/options/../theory/quantifiers/options"
template <> bool Options::wasSetByUser(options::fmfBoundInt__option_t) const;
#line 128 "../../../src/options/../theory/quantifiers/options"
template <> void Options::assignBool(options::fmfBoundInt__option_t, std::string option, bool value, SmtEngine* smt);
#line 131 "../../../src/options/../theory/quantifiers/options"
template <> const options::axiomInstMode__option_t::type& Options::operator[](options::axiomInstMode__option_t) const;
#line 131 "../../../src/options/../theory/quantifiers/options"
template <> bool Options::wasSetByUser(options::axiomInstMode__option_t) const;
#line 131 "../../../src/options/../theory/quantifiers/options"
template <> void Options::assign(options::axiomInstMode__option_t, std::string option, std::string value, SmtEngine* smt);

#line 44 "../../../src/options/base_options_template.h"

namespace options {


#line 11 "../../../src/options/../theory/quantifiers/options"
inline miniscopeQuant__option_t::type miniscopeQuant__option_t::operator()() const { return Options::current()[*this]; }
#line 11 "../../../src/options/../theory/quantifiers/options"
inline bool miniscopeQuant__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 17 "../../../src/options/../theory/quantifiers/options"
inline miniscopeQuantFreeVar__option_t::type miniscopeQuantFreeVar__option_t::operator()() const { return Options::current()[*this]; }
#line 17 "../../../src/options/../theory/quantifiers/options"
inline bool miniscopeQuantFreeVar__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 21 "../../../src/options/../theory/quantifiers/options"
inline prenexQuant__option_t::type prenexQuant__option_t::operator()() const { return Options::current()[*this]; }
#line 21 "../../../src/options/../theory/quantifiers/options"
inline bool prenexQuant__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 27 "../../../src/options/../theory/quantifiers/options"
inline varElimQuant__option_t::type varElimQuant__option_t::operator()() const { return Options::current()[*this]; }
#line 27 "../../../src/options/../theory/quantifiers/options"
inline bool varElimQuant__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 30 "../../../src/options/../theory/quantifiers/options"
inline simpleIteLiftQuant__option_t::type simpleIteLiftQuant__option_t::operator()() const { return Options::current()[*this]; }
#line 30 "../../../src/options/../theory/quantifiers/options"
inline bool simpleIteLiftQuant__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 34 "../../../src/options/../theory/quantifiers/options"
inline cnfQuant__option_t::type cnfQuant__option_t::operator()() const { return Options::current()[*this]; }
#line 34 "../../../src/options/../theory/quantifiers/options"
inline bool cnfQuant__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 37 "../../../src/options/../theory/quantifiers/options"
inline clauseSplit__option_t::type clauseSplit__option_t::operator()() const { return Options::current()[*this]; }
#line 37 "../../../src/options/../theory/quantifiers/options"
inline bool clauseSplit__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 43 "../../../src/options/../theory/quantifiers/options"
inline preSkolemQuant__option_t::type preSkolemQuant__option_t::operator()() const { return Options::current()[*this]; }
#line 43 "../../../src/options/../theory/quantifiers/options"
inline bool preSkolemQuant__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 45 "../../../src/options/../theory/quantifiers/options"
inline iteRemoveQuant__option_t::type iteRemoveQuant__option_t::operator()() const { return Options::current()[*this]; }
#line 45 "../../../src/options/../theory/quantifiers/options"
inline bool iteRemoveQuant__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 48 "../../../src/options/../theory/quantifiers/options"
inline aggressiveMiniscopeQuant__option_t::type aggressiveMiniscopeQuant__option_t::operator()() const { return Options::current()[*this]; }
#line 48 "../../../src/options/../theory/quantifiers/options"
inline bool aggressiveMiniscopeQuant__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 51 "../../../src/options/../theory/quantifiers/options"
inline macrosQuant__option_t::type macrosQuant__option_t::operator()() const { return Options::current()[*this]; }
#line 51 "../../../src/options/../theory/quantifiers/options"
inline bool macrosQuant__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 54 "../../../src/options/../theory/quantifiers/options"
inline foPropQuant__option_t::type foPropQuant__option_t::operator()() const { return Options::current()[*this]; }
#line 54 "../../../src/options/../theory/quantifiers/options"
inline bool foPropQuant__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 58 "../../../src/options/../theory/quantifiers/options"
inline smartTriggers__option_t::type smartTriggers__option_t::operator()() const { return Options::current()[*this]; }
#line 58 "../../../src/options/../theory/quantifiers/options"
inline bool smartTriggers__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 61 "../../../src/options/../theory/quantifiers/options"
inline relevantTriggers__option_t::type relevantTriggers__option_t::operator()() const { return Options::current()[*this]; }
#line 61 "../../../src/options/../theory/quantifiers/options"
inline bool relevantTriggers__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 63 "../../../src/options/../theory/quantifiers/options"
inline relationalTriggers__option_t::type relationalTriggers__option_t::operator()() const { return Options::current()[*this]; }
#line 63 "../../../src/options/../theory/quantifiers/options"
inline bool relationalTriggers__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 67 "../../../src/options/../theory/quantifiers/options"
inline registerQuantBodyTerms__option_t::type registerQuantBodyTerms__option_t::operator()() const { return Options::current()[*this]; }
#line 67 "../../../src/options/../theory/quantifiers/options"
inline bool registerQuantBodyTerms__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 70 "../../../src/options/../theory/quantifiers/options"
inline instWhenMode__option_t::type instWhenMode__option_t::operator()() const { return Options::current()[*this]; }
#line 70 "../../../src/options/../theory/quantifiers/options"
inline bool instWhenMode__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }
#line 70 "../../../src/options/../theory/quantifiers/options"
inline void instWhenMode__option_t::set(const instWhenMode__option_t::type& v) { Options::current().set(*this, v); }

#line 73 "../../../src/options/../theory/quantifiers/options"
inline eagerInstQuant__option_t::type eagerInstQuant__option_t::operator()() const { return Options::current()[*this]; }
#line 73 "../../../src/options/../theory/quantifiers/options"
inline bool eagerInstQuant__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 76 "../../../src/options/../theory/quantifiers/options"
inline literalMatchMode__option_t::type literalMatchMode__option_t::operator()() const { return Options::current()[*this]; }
#line 76 "../../../src/options/../theory/quantifiers/options"
inline bool literalMatchMode__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 79 "../../../src/options/../theory/quantifiers/options"
inline cbqi__option_t::type cbqi__option_t::operator()() const { return Options::current()[*this]; }
#line 79 "../../../src/options/../theory/quantifiers/options"
inline bool cbqi__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 83 "../../../src/options/../theory/quantifiers/options"
inline recurseCbqi__option_t::type recurseCbqi__option_t::operator()() const { return Options::current()[*this]; }
#line 83 "../../../src/options/../theory/quantifiers/options"
inline bool recurseCbqi__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 86 "../../../src/options/../theory/quantifiers/options"
inline userPatternsQuant__option_t::type userPatternsQuant__option_t::operator()() const { return Options::current()[*this]; }
#line 86 "../../../src/options/../theory/quantifiers/options"
inline bool userPatternsQuant__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 89 "../../../src/options/../theory/quantifiers/options"
inline flipDecision__option_t::type flipDecision__option_t::operator()() const { return Options::current()[*this]; }
#line 89 "../../../src/options/../theory/quantifiers/options"
inline bool flipDecision__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 92 "../../../src/options/../theory/quantifiers/options"
inline internalReps__option_t::type internalReps__option_t::operator()() const { return Options::current()[*this]; }
#line 92 "../../../src/options/../theory/quantifiers/options"
inline bool internalReps__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 95 "../../../src/options/../theory/quantifiers/options"
inline finiteModelFind__option_t::type finiteModelFind__option_t::operator()() const { return Options::current()[*this]; }
#line 95 "../../../src/options/../theory/quantifiers/options"
inline bool finiteModelFind__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 98 "../../../src/options/../theory/quantifiers/options"
inline fmfModelBasedInst__option_t::type fmfModelBasedInst__option_t::operator()() const { return Options::current()[*this]; }
#line 98 "../../../src/options/../theory/quantifiers/options"
inline bool fmfModelBasedInst__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 101 "../../../src/options/../theory/quantifiers/options"
inline fmfFullModelCheck__option_t::type fmfFullModelCheck__option_t::operator()() const { return Options::current()[*this]; }
#line 101 "../../../src/options/../theory/quantifiers/options"
inline bool fmfFullModelCheck__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }
#line 101 "../../../src/options/../theory/quantifiers/options"
inline void fmfFullModelCheck__option_t::set(const fmfFullModelCheck__option_t::type& v) { Options::current().set(*this, v); }

#line 103 "../../../src/options/../theory/quantifiers/options"
inline fmfFmcSimple__option_t::type fmfFmcSimple__option_t::operator()() const { return Options::current()[*this]; }
#line 103 "../../../src/options/../theory/quantifiers/options"
inline bool fmfFmcSimple__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 105 "../../../src/options/../theory/quantifiers/options"
inline fmfFmcCoverSimplify__option_t::type fmfFmcCoverSimplify__option_t::operator()() const { return Options::current()[*this]; }
#line 105 "../../../src/options/../theory/quantifiers/options"
inline bool fmfFmcCoverSimplify__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 107 "../../../src/options/../theory/quantifiers/options"
inline fmfFmcInterval__option_t::type fmfFmcInterval__option_t::operator()() const { return Options::current()[*this]; }
#line 107 "../../../src/options/../theory/quantifiers/options"
inline bool fmfFmcInterval__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 110 "../../../src/options/../theory/quantifiers/options"
inline fmfOneInstPerRound__option_t::type fmfOneInstPerRound__option_t::operator()() const { return Options::current()[*this]; }
#line 110 "../../../src/options/../theory/quantifiers/options"
inline bool fmfOneInstPerRound__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 112 "../../../src/options/../theory/quantifiers/options"
inline fmfOneQuantPerRound__option_t::type fmfOneQuantPerRound__option_t::operator()() const { return Options::current()[*this]; }
#line 112 "../../../src/options/../theory/quantifiers/options"
inline bool fmfOneQuantPerRound__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 114 "../../../src/options/../theory/quantifiers/options"
inline fmfInstEngine__option_t::type fmfInstEngine__option_t::operator()() const { return Options::current()[*this]; }
#line 114 "../../../src/options/../theory/quantifiers/options"
inline bool fmfInstEngine__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 116 "../../../src/options/../theory/quantifiers/options"
inline fmfRelevantDomain__option_t::type fmfRelevantDomain__option_t::operator()() const { return Options::current()[*this]; }
#line 116 "../../../src/options/../theory/quantifiers/options"
inline bool fmfRelevantDomain__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 118 "../../../src/options/../theory/quantifiers/options"
inline fmfNewInstGen__option_t::type fmfNewInstGen__option_t::operator()() const { return Options::current()[*this]; }
#line 118 "../../../src/options/../theory/quantifiers/options"
inline bool fmfNewInstGen__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 120 "../../../src/options/../theory/quantifiers/options"
inline fmfInstGen__option_t::type fmfInstGen__option_t::operator()() const { return Options::current()[*this]; }
#line 120 "../../../src/options/../theory/quantifiers/options"
inline bool fmfInstGen__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }
#line 120 "../../../src/options/../theory/quantifiers/options"
inline void fmfInstGen__option_t::set(const fmfInstGen__option_t::type& v) { Options::current().set(*this, v); }

#line 123 "../../../src/options/../theory/quantifiers/options"
inline fmfInstGenOneQuantPerRound__option_t::type fmfInstGenOneQuantPerRound__option_t::operator()() const { return Options::current()[*this]; }
#line 123 "../../../src/options/../theory/quantifiers/options"
inline bool fmfInstGenOneQuantPerRound__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 125 "../../../src/options/../theory/quantifiers/options"
inline fmfFreshDistConst__option_t::type fmfFreshDistConst__option_t::operator()() const { return Options::current()[*this]; }
#line 125 "../../../src/options/../theory/quantifiers/options"
inline bool fmfFreshDistConst__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 128 "../../../src/options/../theory/quantifiers/options"
inline fmfBoundInt__option_t::type fmfBoundInt__option_t::operator()() const { return Options::current()[*this]; }
#line 128 "../../../src/options/../theory/quantifiers/options"
inline bool fmfBoundInt__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 131 "../../../src/options/../theory/quantifiers/options"
inline axiomInstMode__option_t::type axiomInstMode__option_t::operator()() const { return Options::current()[*this]; }
#line 131 "../../../src/options/../theory/quantifiers/options"
inline bool axiomInstMode__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 50 "../../../src/options/base_options_template.h"

}/* CVC4::options namespace */

}/* CVC4 namespace */

#endif /* __CVC4__OPTIONS__QUANTIFIERS_H */
