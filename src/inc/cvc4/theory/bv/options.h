/*********************                                                        */
/** options.h
 **
 ** Copyright 2011-2013  New York University and The University of Iowa,
 ** and as below.
 **
 ** This file automatically generated by:
 **
 **     ../../../src/options/mkoptions ../../../src/options/base_options_template.h ../theory/bv/options.h
 **
 ** for the CVC4 project.
 **/

/* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT ! */
/* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT ! */
/* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT ! */
/* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT ! */
/* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT ! */
/* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT ! */

/* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT ! */
/* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT ! */
/* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT ! */
/* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT ! */
/* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT ! */
/* THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT ! */

/* Edit the template file instead.                     */

/*********************                                                        */
/*! \file base_options_template.h
 ** \verbatim
 ** Original author: Morgan Deters
 ** Major contributors: none
 ** Minor contributors (to current version): none
 ** This file is part of the CVC4 project.
 ** Copyright (c) 2009-2013  New York University and The University of Iowa
 ** See the file COPYING in the top-level source directory for licensing
 ** information.\endverbatim
 **
 ** \brief Contains code for handling command-line options.
 **
 ** Contains code for handling command-line options
 **/

#include <cvc4/cvc4_public.h>

#ifndef __CVC4__OPTIONS__BV_H
#define __CVC4__OPTIONS__BV_H

#include <cvc4/options/options.h>


#line 26 "../../../src/options/base_options_template.h"

#define CVC4_OPTIONS__BV__FOR_OPTION_HOLDER \
  bitvectorEagerBitblast__option_t::type bitvectorEagerBitblast; \
  bool bitvectorEagerBitblast__setByUser__; \
  bitvectorShareLemmas__option_t::type bitvectorShareLemmas; \
  bool bitvectorShareLemmas__setByUser__; \
  bitvectorEagerFullcheck__option_t::type bitvectorEagerFullcheck; \
  bool bitvectorEagerFullcheck__setByUser__; \
  bitvectorInequalitySolver__option_t::type bitvectorInequalitySolver; \
  bool bitvectorInequalitySolver__setByUser__; \
  bitvectorCoreSolver__option_t::type bitvectorCoreSolver; \
  bool bitvectorCoreSolver__setByUser__; \
  bvToBool__option_t::type bvToBool; \
  bool bvToBool__setByUser__; \
  bvPropagate__option_t::type bvPropagate; \
  bool bvPropagate__setByUser__; \
  bvEquality__option_t::type bvEquality; \
  bool bvEquality__setByUser__;

#line 30 "../../../src/options/base_options_template.h"

namespace CVC4 {

namespace options {


#line 8 "../../../src/options/../theory/bv/options"
extern struct CVC4_PUBLIC bitvectorEagerBitblast__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; } bitvectorEagerBitblast CVC4_PUBLIC;
#line 11 "../../../src/options/../theory/bv/options"
extern struct CVC4_PUBLIC bitvectorShareLemmas__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; } bitvectorShareLemmas CVC4_PUBLIC;
#line 14 "../../../src/options/../theory/bv/options"
extern struct CVC4_PUBLIC bitvectorEagerFullcheck__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; } bitvectorEagerFullcheck CVC4_PUBLIC;
#line 17 "../../../src/options/../theory/bv/options"
extern struct CVC4_PUBLIC bitvectorInequalitySolver__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; } bitvectorInequalitySolver CVC4_PUBLIC;
#line 20 "../../../src/options/../theory/bv/options"
extern struct CVC4_PUBLIC bitvectorCoreSolver__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; } bitvectorCoreSolver CVC4_PUBLIC;
#line 23 "../../../src/options/../theory/bv/options"
extern struct CVC4_PUBLIC bvToBool__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; } bvToBool CVC4_PUBLIC;
#line 26 "../../../src/options/../theory/bv/options"
extern struct CVC4_PUBLIC bvPropagate__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; } bvPropagate CVC4_PUBLIC;
#line 29 "../../../src/options/../theory/bv/options"
extern struct CVC4_PUBLIC bvEquality__option_t { typedef bool type; type operator()() const; bool wasSetByUser() const; } bvEquality CVC4_PUBLIC;

#line 38 "../../../src/options/base_options_template.h"

}/* CVC4::options namespace */


#line 8 "../../../src/options/../theory/bv/options"
template <> const options::bitvectorEagerBitblast__option_t::type& Options::operator[](options::bitvectorEagerBitblast__option_t) const;
#line 8 "../../../src/options/../theory/bv/options"
template <> bool Options::wasSetByUser(options::bitvectorEagerBitblast__option_t) const;
#line 8 "../../../src/options/../theory/bv/options"
template <> void Options::assignBool(options::bitvectorEagerBitblast__option_t, std::string option, bool value, SmtEngine* smt);
#line 11 "../../../src/options/../theory/bv/options"
template <> const options::bitvectorShareLemmas__option_t::type& Options::operator[](options::bitvectorShareLemmas__option_t) const;
#line 11 "../../../src/options/../theory/bv/options"
template <> bool Options::wasSetByUser(options::bitvectorShareLemmas__option_t) const;
#line 11 "../../../src/options/../theory/bv/options"
template <> void Options::assignBool(options::bitvectorShareLemmas__option_t, std::string option, bool value, SmtEngine* smt);
#line 14 "../../../src/options/../theory/bv/options"
template <> const options::bitvectorEagerFullcheck__option_t::type& Options::operator[](options::bitvectorEagerFullcheck__option_t) const;
#line 14 "../../../src/options/../theory/bv/options"
template <> bool Options::wasSetByUser(options::bitvectorEagerFullcheck__option_t) const;
#line 14 "../../../src/options/../theory/bv/options"
template <> void Options::assignBool(options::bitvectorEagerFullcheck__option_t, std::string option, bool value, SmtEngine* smt);
#line 17 "../../../src/options/../theory/bv/options"
template <> const options::bitvectorInequalitySolver__option_t::type& Options::operator[](options::bitvectorInequalitySolver__option_t) const;
#line 17 "../../../src/options/../theory/bv/options"
template <> bool Options::wasSetByUser(options::bitvectorInequalitySolver__option_t) const;
#line 17 "../../../src/options/../theory/bv/options"
template <> void Options::assignBool(options::bitvectorInequalitySolver__option_t, std::string option, bool value, SmtEngine* smt);
#line 20 "../../../src/options/../theory/bv/options"
template <> const options::bitvectorCoreSolver__option_t::type& Options::operator[](options::bitvectorCoreSolver__option_t) const;
#line 20 "../../../src/options/../theory/bv/options"
template <> bool Options::wasSetByUser(options::bitvectorCoreSolver__option_t) const;
#line 20 "../../../src/options/../theory/bv/options"
template <> void Options::assignBool(options::bitvectorCoreSolver__option_t, std::string option, bool value, SmtEngine* smt);
#line 23 "../../../src/options/../theory/bv/options"
template <> const options::bvToBool__option_t::type& Options::operator[](options::bvToBool__option_t) const;
#line 23 "../../../src/options/../theory/bv/options"
template <> bool Options::wasSetByUser(options::bvToBool__option_t) const;
#line 23 "../../../src/options/../theory/bv/options"
template <> void Options::assignBool(options::bvToBool__option_t, std::string option, bool value, SmtEngine* smt);
#line 26 "../../../src/options/../theory/bv/options"
template <> const options::bvPropagate__option_t::type& Options::operator[](options::bvPropagate__option_t) const;
#line 26 "../../../src/options/../theory/bv/options"
template <> bool Options::wasSetByUser(options::bvPropagate__option_t) const;
#line 26 "../../../src/options/../theory/bv/options"
template <> void Options::assignBool(options::bvPropagate__option_t, std::string option, bool value, SmtEngine* smt);
#line 29 "../../../src/options/../theory/bv/options"
template <> const options::bvEquality__option_t::type& Options::operator[](options::bvEquality__option_t) const;
#line 29 "../../../src/options/../theory/bv/options"
template <> bool Options::wasSetByUser(options::bvEquality__option_t) const;
#line 29 "../../../src/options/../theory/bv/options"
template <> void Options::assignBool(options::bvEquality__option_t, std::string option, bool value, SmtEngine* smt);

#line 44 "../../../src/options/base_options_template.h"

namespace options {


#line 8 "../../../src/options/../theory/bv/options"
inline bitvectorEagerBitblast__option_t::type bitvectorEagerBitblast__option_t::operator()() const { return Options::current()[*this]; }
#line 8 "../../../src/options/../theory/bv/options"
inline bool bitvectorEagerBitblast__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 11 "../../../src/options/../theory/bv/options"
inline bitvectorShareLemmas__option_t::type bitvectorShareLemmas__option_t::operator()() const { return Options::current()[*this]; }
#line 11 "../../../src/options/../theory/bv/options"
inline bool bitvectorShareLemmas__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 14 "../../../src/options/../theory/bv/options"
inline bitvectorEagerFullcheck__option_t::type bitvectorEagerFullcheck__option_t::operator()() const { return Options::current()[*this]; }
#line 14 "../../../src/options/../theory/bv/options"
inline bool bitvectorEagerFullcheck__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 17 "../../../src/options/../theory/bv/options"
inline bitvectorInequalitySolver__option_t::type bitvectorInequalitySolver__option_t::operator()() const { return Options::current()[*this]; }
#line 17 "../../../src/options/../theory/bv/options"
inline bool bitvectorInequalitySolver__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 20 "../../../src/options/../theory/bv/options"
inline bitvectorCoreSolver__option_t::type bitvectorCoreSolver__option_t::operator()() const { return Options::current()[*this]; }
#line 20 "../../../src/options/../theory/bv/options"
inline bool bitvectorCoreSolver__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 23 "../../../src/options/../theory/bv/options"
inline bvToBool__option_t::type bvToBool__option_t::operator()() const { return Options::current()[*this]; }
#line 23 "../../../src/options/../theory/bv/options"
inline bool bvToBool__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 26 "../../../src/options/../theory/bv/options"
inline bvPropagate__option_t::type bvPropagate__option_t::operator()() const { return Options::current()[*this]; }
#line 26 "../../../src/options/../theory/bv/options"
inline bool bvPropagate__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 29 "../../../src/options/../theory/bv/options"
inline bvEquality__option_t::type bvEquality__option_t::operator()() const { return Options::current()[*this]; }
#line 29 "../../../src/options/../theory/bv/options"
inline bool bvEquality__option_t::wasSetByUser() const { return Options::current().wasSetByUser(*this); }

#line 50 "../../../src/options/base_options_template.h"

}/* CVC4::options namespace */

}/* CVC4 namespace */

#endif /* __CVC4__OPTIONS__BV_H */
