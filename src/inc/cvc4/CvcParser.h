/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : ../../../../src/parser/cvc/Cvc.g
 *     -                            On : 2013-12-06 18:07:55
 *     -                for the parser : CvcParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser 
CvcParser

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pCvcParser, which is returned from a call to CvcParserNew().
 *
 * The methods in pCvcParser are  as follows:
 *
 *  - 
 CVC4::Expr
      pCvcParser->parseExpr(pCvcParser)
 *  - 
 CVC4::Command*
      pCvcParser->parseCommand(pCvcParser)
 *  - 
 CVC4::Command*
      pCvcParser->command(pCvcParser)
 *  - 
 void
      pCvcParser->typeOrVarLetDecl(pCvcParser)
 *  - 
 void
      pCvcParser->mainCommand(pCvcParser)
 *  - 
 void
      pCvcParser->simpleSymbolicExpr(pCvcParser)
 *  - 
 void
      pCvcParser->symbolicExpr(pCvcParser)
 *  - 
 void
      pCvcParser->toplevelDeclaration(pCvcParser)
 *  - 
 void
      pCvcParser->boundVarDecl(pCvcParser)
 *  - 
 void
      pCvcParser->boundVarDecls(pCvcParser)
 *  - 
 void
      pCvcParser->boundVarDeclsReturn(pCvcParser)
 *  - 
 void
      pCvcParser->boundVarDeclReturn(pCvcParser)
 *  - 
 void
      pCvcParser->declareTypes(pCvcParser)
 *  - 
 void
      pCvcParser->declareVariables(pCvcParser)
 *  - 
 void
      pCvcParser->identifierList(pCvcParser)
 *  - 
 void
      pCvcParser->identifier(pCvcParser)
 *  - 
 void
      pCvcParser->type(pCvcParser)
 *  - 
 void
      pCvcParser->restrictedType(pCvcParser)
 *  - 
 void
      pCvcParser->restrictedTypePossiblyFunctionLHS(pCvcParser)
 *  - 
 void
      pCvcParser->parameterization(pCvcParser)
 *  - 
 CVC4::parser::cvc::mySubrangeBound
      pCvcParser->bound(pCvcParser)
 *  - 
 void
      pCvcParser->typeLetDecl(pCvcParser)
 *  - 
 void
      pCvcParser->formula(pCvcParser)
 *  - 
 size_t
      pCvcParser->morecomparisons(pCvcParser)
 *  - 
 size_t
      pCvcParser->nots(pCvcParser)
 *  - 
 void
      pCvcParser->prefixFormula(pCvcParser)
 *  - 
 void
      pCvcParser->instantiationPatterns(pCvcParser)
 *  - 
 void
      pCvcParser->letDecl(pCvcParser)
 *  - 
 void
      pCvcParser->booleanBinop(pCvcParser)
 *  - 
 void
      pCvcParser->comparison(pCvcParser)
 *  - 
 void
      pCvcParser->comparisonBinop(pCvcParser)
 *  - 
 void
      pCvcParser->term(pCvcParser)
 *  - 
 void
      pCvcParser->arithmeticBinop(pCvcParser)
 *  - 
 void
      pCvcParser->storeTerm(pCvcParser)
 *  - 
 void
      pCvcParser->arrayStore(pCvcParser)
 *  - 
 void
      pCvcParser->tupleStore(pCvcParser)
 *  - 
 void
      pCvcParser->recordStore(pCvcParser)
 *  - 
 void
      pCvcParser->uminusTerm(pCvcParser)
 *  - 
 void
      pCvcParser->bvBinaryOpTerm(pCvcParser)
 *  - 
 void
      pCvcParser->bvBinop(pCvcParser)
 *  - 
 void
      pCvcParser->bvNegTerm(pCvcParser)
 *  - 
 void
      pCvcParser->postfixTerm(pCvcParser)
 *  - 
 void
      pCvcParser->bvTerm(pCvcParser)
 *  - 
 void
      pCvcParser->simpleTerm(pCvcParser)
 *  - 
 void
      pCvcParser->typeAscription(pCvcParser)
 *  - 
 void
      pCvcParser->recordEntry(pCvcParser)
 *  - 
 void
      pCvcParser->iteTerm(pCvcParser)
 *  - 
 void
      pCvcParser->iteElseTerm(pCvcParser)
 *  - 
 void
      pCvcParser->datatypeDef(pCvcParser)
 *  - 
 void
      pCvcParser->constructorDef(pCvcParser)
 *  - 
 void
      pCvcParser->selector(pCvcParser)
 *  - 
 unsigned
      pCvcParser->numeral(pCvcParser)
 *  - 
 CVC4::Rational
      pCvcParser->integer(pCvcParser)
 *  - 
 void
      pCvcParser->str(pCvcParser)
 * 
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_CvcParser_H
#define _CvcParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */


#include <stdint.h>
#include <cassert>
#include "expr/command.h"
#include "parser/parser.h"
#include "util/subrange_bound.h"
#include "parser/antlr_tracing.h"

namespace CVC4 {
  class Expr;

  namespace parser {
    namespace cvc {
      /**
       * This class is just here to get around an unfortunate bit of Antlr.
       * We use strings below as return values from rules, which require
       * them to be constructible by a void*.  So we derive the string
       * class to provide just such a conversion.
       */
      class myString : public std::string {
      public:
        myString(const std::string& s) : std::string(s) {}
        myString(void*) : std::string() {}
        myString() : std::string() {}
      };/* class myString */

      /**
       * Just exists to give us the void* construction that
       * ANTLR requires.
       */
      class mySubrangeBound : public CVC4::SubrangeBound {
      public:
        mySubrangeBound() : CVC4::SubrangeBound() {}
        mySubrangeBound(void*) : CVC4::SubrangeBound() {}
        mySubrangeBound(const Integer& i) : CVC4::SubrangeBound(i) {}
        mySubrangeBound(const SubrangeBound& b) : CVC4::SubrangeBound(b) {}
      };/* class mySubrangeBound */

      /**
       * Just exists to give us the void* construction that
       * ANTLR requires.
       */
      struct myExpr : public CVC4::Expr {
        myExpr() : CVC4::Expr() {}
        myExpr(void*) : CVC4::Expr() {}
        myExpr(const Expr& e) : CVC4::Expr(e) {}
        myExpr(const myExpr& e) : CVC4::Expr(e) {}
      };/* struct myExpr */

    }/* CVC4::parser::cvc namespace */
  }/* CVC4::parser namespace */
}/* CVC4 namespace */



#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct CvcParser_Ctx_struct CvcParser, * pCvcParser;



/**
 ** This file is part of CVC4.
 ** Copyright (c) 2009-2013  New York University and The University of Iowa
 ** See the file COPYING in the top-level source directory for licensing
 ** information.
 **/


#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */


/** Context tracking structure for 
CvcParser

 */
struct CvcParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;

     CVC4::Expr
     (*parseExpr)	(struct CvcParser_Ctx_struct * ctx);

     CVC4::Command*
     (*parseCommand)	(struct CvcParser_Ctx_struct * ctx);

     CVC4::Command*
     (*command)	(struct CvcParser_Ctx_struct * ctx);

     void
     (*typeOrVarLetDecl)	(struct CvcParser_Ctx_struct * ctx, CVC4::parser::DeclarationCheck check);

     void
     (*mainCommand)	(struct CvcParser_Ctx_struct * ctx, CVC4::Command*& cmd);

     void
     (*simpleSymbolicExpr)	(struct CvcParser_Ctx_struct * ctx, CVC4::SExpr& sexpr);

     void
     (*symbolicExpr)	(struct CvcParser_Ctx_struct * ctx, CVC4::SExpr& sexpr);

     void
     (*toplevelDeclaration)	(struct CvcParser_Ctx_struct * ctx, CVC4::Command*& cmd);

     void
     (*boundVarDecl)	(struct CvcParser_Ctx_struct * ctx, std::vector<std::string>& ids, CVC4::Type& t);

     void
     (*boundVarDecls)	(struct CvcParser_Ctx_struct * ctx);

     void
     (*boundVarDeclsReturn)	(struct CvcParser_Ctx_struct * ctx, std::vector<CVC4::Expr>& terms, std::vector<CVC4::Type>& types);

     void
     (*boundVarDeclReturn)	(struct CvcParser_Ctx_struct * ctx, std::vector<CVC4::Expr>& terms, std::vector<CVC4::Type>& types);

     void
     (*declareTypes)	(struct CvcParser_Ctx_struct * ctx, CVC4::Command*& cmd, const std::vector<std::string>& idList);

     void
     (*declareVariables)	(struct CvcParser_Ctx_struct * ctx, CVC4::Command*& cmd, CVC4::Type& t, const std::vector<std::string>& idList, bool topLevel);

     void
     (*identifierList)	(struct CvcParser_Ctx_struct * ctx, std::vector<std::string>& idList, CVC4::parser::DeclarationCheck check, CVC4::parser::SymbolType type);

     void
     (*identifier)	(struct CvcParser_Ctx_struct * ctx, std::string& id, CVC4::parser::DeclarationCheck check, CVC4::parser::SymbolType type);

     void
     (*type)	(struct CvcParser_Ctx_struct * ctx, CVC4::Type& t, CVC4::parser::DeclarationCheck check);

     void
     (*restrictedType)	(struct CvcParser_Ctx_struct * ctx, CVC4::Type& t, CVC4::parser::DeclarationCheck check);

     void
     (*restrictedTypePossiblyFunctionLHS)	(struct CvcParser_Ctx_struct * ctx, CVC4::Type& t, CVC4::parser::DeclarationCheck check, bool& lhs);

     void
     (*parameterization)	(struct CvcParser_Ctx_struct * ctx, CVC4::parser::DeclarationCheck check, std::vector<CVC4::Type>& params);

     CVC4::parser::cvc::mySubrangeBound
     (*bound)	(struct CvcParser_Ctx_struct * ctx);

     void
     (*typeLetDecl)	(struct CvcParser_Ctx_struct * ctx, CVC4::parser::DeclarationCheck check);

     void
     (*formula)	(struct CvcParser_Ctx_struct * ctx, CVC4::Expr& f);

     size_t
     (*morecomparisons)	(struct CvcParser_Ctx_struct * ctx, std::vector<CVC4::Expr>& expressions, std::vector<unsigned>& operators);

     size_t
     (*nots)	(struct CvcParser_Ctx_struct * ctx);

     void
     (*prefixFormula)	(struct CvcParser_Ctx_struct * ctx, CVC4::Expr& f);

     void
     (*instantiationPatterns)	(struct CvcParser_Ctx_struct * ctx, CVC4::Expr& expr);

     void
     (*letDecl)	(struct CvcParser_Ctx_struct * ctx);

     void
     (*booleanBinop)	(struct CvcParser_Ctx_struct * ctx, unsigned& op);

     void
     (*comparison)	(struct CvcParser_Ctx_struct * ctx, CVC4::Expr& f);

     void
     (*comparisonBinop)	(struct CvcParser_Ctx_struct * ctx, unsigned& op);

     void
     (*term)	(struct CvcParser_Ctx_struct * ctx, CVC4::Expr& f);

     void
     (*arithmeticBinop)	(struct CvcParser_Ctx_struct * ctx, unsigned& op);

     void
     (*storeTerm)	(struct CvcParser_Ctx_struct * ctx, CVC4::Expr& f);

     void
     (*arrayStore)	(struct CvcParser_Ctx_struct * ctx, CVC4::Expr& f);

     void
     (*tupleStore)	(struct CvcParser_Ctx_struct * ctx, CVC4::Expr& f);

     void
     (*recordStore)	(struct CvcParser_Ctx_struct * ctx, CVC4::Expr& f);

     void
     (*uminusTerm)	(struct CvcParser_Ctx_struct * ctx, CVC4::Expr& f);

     void
     (*bvBinaryOpTerm)	(struct CvcParser_Ctx_struct * ctx, CVC4::Expr& f);

     void
     (*bvBinop)	(struct CvcParser_Ctx_struct * ctx, unsigned& op);

     void
     (*bvNegTerm)	(struct CvcParser_Ctx_struct * ctx, CVC4::Expr& f);

     void
     (*postfixTerm)	(struct CvcParser_Ctx_struct * ctx, CVC4::Expr& f);

     void
     (*bvTerm)	(struct CvcParser_Ctx_struct * ctx, CVC4::Expr& f);

     void
     (*simpleTerm)	(struct CvcParser_Ctx_struct * ctx, CVC4::Expr& f);

     void
     (*typeAscription)	(struct CvcParser_Ctx_struct * ctx, const CVC4::Expr& f, CVC4::Type& t);

     void
     (*recordEntry)	(struct CvcParser_Ctx_struct * ctx, std::string& name, CVC4::Expr& ex);

     void
     (*iteTerm)	(struct CvcParser_Ctx_struct * ctx, CVC4::Expr& f);

     void
     (*iteElseTerm)	(struct CvcParser_Ctx_struct * ctx, CVC4::Expr& f);

     void
     (*datatypeDef)	(struct CvcParser_Ctx_struct * ctx, std::vector<CVC4::Datatype>& datatypes);

     void
     (*constructorDef)	(struct CvcParser_Ctx_struct * ctx, CVC4::Datatype& type);

     void
     (*selector)	(struct CvcParser_Ctx_struct * ctx, CVC4::DatatypeConstructor& ctor);

     unsigned
     (*numeral)	(struct CvcParser_Ctx_struct * ctx);

     CVC4::Rational
     (*integer)	(struct CvcParser_Ctx_struct * ctx);

     void
     (*str)	(struct CvcParser_Ctx_struct * ctx, std::string& s);

     ANTLR3_BOOLEAN
     (*synpred1_Cvc)	(struct CvcParser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct CvcParser_Ctx_struct * ctx);
    void	    (*free)   (struct CvcParser_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pCvcParser CvcParserNew         (
pANTLR3_COMMON_TOKEN_STREAM
 instream);
ANTLR3_API pCvcParser CvcParserNewSSD      (
pANTLR3_COMMON_TOKEN_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
parser
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define ALPHA      4
#define AND_TOK      5
#define ARITH_VAR_ORDER_TOK      6
#define ARRAY_TOK      7
#define ARROW_TOK      8
#define ASSERTIONS_TOK      9
#define ASSERT_TOK      10
#define ASSIGN_TOK      11
#define ASSUMPTIONS_TOK      12
#define BAR      13
#define BINARY_LITERAL      14
#define BITVECTOR_TOK      15
#define BOOLEAN_TOK      16
#define BVAND_TOK      17
#define BVASHR_TOK      18
#define BVCOMP_TOK      19
#define BVGE_TOK      20
#define BVGT_TOK      21
#define BVLE_TOK      22
#define BVLSHR_TOK      23
#define BVLT_TOK      24
#define BVMULT_TOK      25
#define BVNAND_TOK      26
#define BVNEG_TOK      27
#define BVNOR_TOK      28
#define BVPLUS_TOK      29
#define BVREPEAT_TOK      30
#define BVROTL_TOK      31
#define BVROTR_TOK      32
#define BVSDIV_TOK      33
#define BVSGE_TOK      34
#define BVSGT_TOK      35
#define BVSHL_TOK      36
#define BVSLE_TOK      37
#define BVSLT_TOK      38
#define BVSMOD_TOK      39
#define BVSREM_TOK      40
#define BVSUB_TOK      41
#define BVUDIV_TOK      42
#define BVUMINUS_TOK      43
#define BVUREM_TOK      44
#define BVXNOR_TOK      45
#define BVXOR_TOK      46
#define BVZEROEXTEND_TOK      47
#define CALL_TOK      48
#define CHECKSAT_TOK      49
#define CHECK_TYPE_TOK      50
#define COLON      51
#define COMMA      52
#define COMMENT      53
#define CONCAT_TOK      54
#define CONTEXT_TOK      55
#define COUNTEREXAMPLE_TOK      56
#define COUNTERMODEL_TOK      57
#define DATATYPE_TOK      58
#define DBG_TOK      59
#define DECIMAL_LITERAL      60
#define DIGIT      61
#define DISEQUAL_TOK      62
#define DISTINCT_TOK      63
#define DIV_TOK      64
#define DOT      65
#define DOTDOT      66
#define DUMP_ASSUMPTIONS_TOK      67
#define DUMP_CLOSURE_PROOF_TOK      68
#define DUMP_CLOSURE_TOK      69
#define DUMP_PROOF_TOK      70
#define DUMP_SIG_TOK      71
#define DUMP_TCC_ASSUMPTIONS_TOK      72
#define DUMP_TCC_PROOF_TOK      73
#define DUMP_TCC_TOK      74
#define ECHO_TOK      75
#define ELSEIF_TOK      76
#define ELSE_TOK      77
#define ENDIF_TOK      78
#define END_TOK      79
#define EQUAL_TOK      80
#define ESCAPE      81
#define EXISTS_TOK      82
#define EXIT_TOK      83
#define EXP_TOK      84
#define FALSE_TOK      85
#define FLOOR_TOK      86
#define FORALL_TOK      87
#define FORGET_TOK      88
#define GEQ_TOK      89
#define GET_CHILD_TOK      90
#define GET_OP_TOK      91
#define GET_TYPE_TOK      92
#define GET_VALUE_TOK      93
#define GT_TOK      94
#define HASHPAREN      95
#define HASHSQ      96
#define HELP_TOK      97
#define HEX_DIGIT      98
#define HEX_LITERAL      99
#define IDENTIFIER      100
#define IFF_TOK      101
#define IF_TOK      102
#define IMPLIES_TOK      103
#define INCLUDE_TOK      104
#define INTDIV_TOK      105
#define INTEGER_LITERAL      106
#define INT_TOK      107
#define IN_TOK      108
#define LAMBDA      109
#define LBRACE      110
#define LBRACKET      111
#define LEFTSHIFT_TOK      112
#define LEQ_TOK      113
#define LET_TOK      114
#define LPAREN      115
#define LT_TOK      116
#define MINUS_TOK      117
#define MOD_TOK      118
#define NOT_TOK      119
#define NUMBER_OR_RANGEOP      120
#define OF_TOK      121
#define OPTION_TOK      122
#define OR_TOK      123
#define PARENHASH      124
#define PATTERN_TOK      125
#define PLUS_TOK      126
#define POPTO_SCOPE_TOK      127
#define POPTO_TOK      128
#define POP_SCOPE_TOK      129
#define POP_TOK      130
#define PRINT_TOK      131
#define PRINT_TYPE_TOK      132
#define PUSH_SCOPE_TOK      133
#define PUSH_TOK      134
#define QUERY_TOK      135
#define RBRACE      136
#define RBRACKET      137
#define REAL_TOK      138
#define RESET_TOK      139
#define RIGHTSHIFT_TOK      140
#define RPAREN      141
#define SEMICOLON      142
#define SQHASH      143
#define STAR_TOK      144
#define STRING_LITERAL      145
#define SUBSTITUTE_TOK      146
#define SUBTYPE_TOK      147
#define SX_TOK      148
#define THEN_TOK      149
#define TRACE_TOK      150
#define TRANSFORM_TOK      151
#define TRUE_TOK      152
#define TYPE_TOK      153
#define UNDERSCORE      154
#define UNTRACE_TOK      155
#define WHERE_TOK      156
#define WHITESPACE      157
#define WITH_TOK      158
#define XOR_TOK      159
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for CvcParser
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
