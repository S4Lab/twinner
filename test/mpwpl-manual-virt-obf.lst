GAS LISTING /tmp/ccU4gSfo.s 			page 1


   1              		.file	"mpwpl-manual-virt-obf.c"
   2              		.text
   3              	.Ltext0:
   4              		.globl	str0
   5              		.section	.rodata
   6              		.align 8
   7              	.LC0:
   8 0000 55736167 		.string	"Usage: program <command codes>\n"
   8      653A2070 
   8      726F6772 
   8      616D203C 
   8      636F6D6D 
   9              		.data
  10              		.align 8
  13              	str0:
  14 0000 00000000 		.quad	.LC0
  14      00000000 
  15              		.globl	str1
  16              		.section	.rodata
  17              		.align 8
  18              	.LC1:
  19 0020 61203E20 		.string	"a > 5, b > 5, c > 5 -- case 1\n"
  19      352C2062 
  19      203E2035 
  19      2C206320 
  19      3E203520 
  20              		.data
  21              		.align 8
  24              	str1:
  25 0008 00000000 		.quad	.LC1
  25      00000000 
  26              		.globl	str2
  27              		.section	.rodata
  28 003f 00       		.align 8
  29              	.LC2:
  30 0040 61203E20 		.string	"a > 5, b > 5, c <= 5 -- case 2\n"
  30      352C2062 
  30      203E2035 
  30      2C206320 
  30      3C3D2035 
  31              		.data
  32              		.align 8
  35              	str2:
  36 0010 00000000 		.quad	.LC2
  36      00000000 
  37              		.globl	str3
  38              		.section	.rodata
  39              		.align 8
  40              	.LC3:
  41 0060 61203E20 		.string	"a > 5, b <= 5, c > 5 -- case 3\n"
  41      352C2062 
  41      203C3D20 
  41      352C2063 
  41      203E2035 
  42              		.data
  43              		.align 8
  46              	str3:
GAS LISTING /tmp/ccU4gSfo.s 			page 2


  47 0018 00000000 		.quad	.LC3
  47      00000000 
  48              		.globl	str4
  49              		.section	.rodata
  50              		.align 8
  51              	.LC4:
  52 0080 61203E20 		.string	"a > 5, b <= 5, c <= 5 -- case 4\n"
  52      352C2062 
  52      203C3D20 
  52      352C2063 
  52      203C3D20 
  53              		.data
  54              		.align 8
  57              	str4:
  58 0020 00000000 		.quad	.LC4
  58      00000000 
  59              		.globl	str5
  60              		.section	.rodata
  61 00a1 00000000 		.align 8
  61      000000
  62              	.LC5:
  63 00a8 61203C3D 		.string	"a <= 5, b > 5, c > 5 -- case 5\n"
  63      20352C20 
  63      62203E20 
  63      352C2063 
  63      203E2035 
  64              		.data
  65              		.align 8
  68              	str5:
  69 0028 00000000 		.quad	.LC5
  69      00000000 
  70              		.globl	str6
  71              		.section	.rodata
  72              		.align 8
  73              	.LC6:
  74 00c8 61203C3D 		.string	"a <= 5, b > 5, c <= 5 -- case 6\n"
  74      20352C20 
  74      62203E20 
  74      352C2063 
  74      203C3D20 
  75              		.data
  76              		.align 8
  79              	str6:
  80 0030 00000000 		.quad	.LC6
  80      00000000 
  81              		.globl	str7
  82              		.section	.rodata
  83 00e9 00000000 		.align 8
  83      000000
  84              	.LC7:
  85 00f0 61203C3D 		.string	"a <= 5, b <= 5, c > 5 -- case 7\n"
  85      20352C20 
  85      62203C3D 
  85      20352C20 
  85      63203E20 
  86              		.data
  87              		.align 8
GAS LISTING /tmp/ccU4gSfo.s 			page 3


  90              	str7:
  91 0038 00000000 		.quad	.LC7
  91      00000000 
  92              		.globl	str8
  93              		.section	.rodata
  94 0111 00000000 		.align 8
  94      000000
  95              	.LC8:
  96 0118 61203C3D 		.string	"a <= 5, b <= 5, c <= 5 -- case 8\n"
  96      20352C20 
  96      62203C3D 
  96      20352C20 
  96      63203C3D 
  97              		.data
  98              		.align 8
 101              	str8:
 102 0040 00000000 		.quad	.LC8
 102      00000000 
 103              		.globl	str9
 104              		.section	.rodata
 105 013a 00000000 		.align 8
 105      0000
 106              	.LC9:
 107 0140 6D756C74 		.string	"multi-path program with printf-leafs\n"
 107      692D7061 
 107      74682070 
 107      726F6772 
 107      616D2077 
 108              		.data
 109              		.align 8
 112              	str9:
 113 0048 00000000 		.quad	.LC9
 113      00000000 
 114              		.globl	program
 115              		.bss
 116              		.align 64
 119              	program:
 120 0000 00000000 		.zero	359
 120      00000000 
 120      00000000 
 120      00000000 
 120      00000000 
 121              		.section	.rodata
 122 0166 0000     		.align 8
 123              	.LC10:
 124 0168 0101FFFF 		.string	"\001\001\377\377\377\377\377\377\377\377\002\002"
 124      FFFFFFFF 
 124      FFFF0202 
 124      00
 125 0175 00       		.string	""
 126 0176 00       		.string	""
 127 0177 010200   		.string	"\001\002"
 128 017a 00       		.string	""
 129 017b 00       		.string	""
 130 017c 00       		.string	""
 131 017d 021500   		.string	"\002\025"
 132 0180 00       		.string	""
GAS LISTING /tmp/ccU4gSfo.s 			page 4


 133 0181 00       		.string	""
 134 0182 02FFFFFF 		.string	"\002\377\377\377\377\377\377\377\377"
 134      FFFFFFFF 
 134      FF00
 135 018c 02FFFFFF 		.string	"\002\377\377\377\377"
 135      FF00
 136 0192 0200     		.string	"\002"
 137 0194 00       		.string	""
 138 0195 00       		.string	""
 139 0196 00       		.string	""
 140 0197 0103FFFF 		.string	"\001\003\377\377\377\377\377\377\377\377\0025"
 140      FFFFFFFF 
 140      FFFF0235 
 140      00
 141 01a4 00       		.string	""
 142 01a5 00       		.string	""
 143 01a6 030200   		.string	"\003\002"
 144 01a9 00       		.string	""
 145 01aa 00       		.string	""
 146 01ab 00       		.string	""
 147 01ac 028A00   		.string	"\002\212"
 148 01af 00       		.string	""
 149 01b0 00       		.string	""
 150 01b1 0103FFFF 		.string	"\001\003\377\377\377\377\377\377\377\377\0025"
 150      FFFFFFFF 
 150      FFFF0235 
 150      00
 151 01be 00       		.string	""
 152 01bf 00       		.string	""
 153 01c0 030200   		.string	"\003\002"
 154 01c3 00       		.string	""
 155 01c4 00       		.string	""
 156 01c5 00       		.string	""
 157 01c6 023800   		.string	"\0028"
 158 01c9 00       		.string	""
 159 01ca 00       		.string	""
 160 01cb 0103FFFF 		.string	"\001\003\377\377\377\377\377\377\377\377\0025"
 160      FFFFFFFF 
 160      FFFF0235 
 160      00
 161 01d8 00       		.string	""
 162 01d9 00       		.string	""
 163 01da 030200   		.string	"\003\002"
 164 01dd 00       		.string	""
 165 01de 00       		.string	""
 166 01df 00       		.string	""
 167 01e0 020F00   		.string	"\002\017"
 168 01e3 00       		.string	""
 169 01e4 00       		.string	""
 170 01e5 02FFFFFF 		.string	"\002\377\377\377\377\377\377\377\377\003\002\t"
 170      FFFFFFFF 
 170      FF030209 
 170      00
 171 01f2 00       		.string	""
 172 01f3 00       		.string	""
 173 01f4 02FFFFFF 		.string	"\002\377\377\377\377\377\377\377\377\003\0022"
 173      FFFFFFFF 
GAS LISTING /tmp/ccU4gSfo.s 			page 5


 173      FF030232 
 173      00
 174 0201 00       		.string	""
 175 0202 00       		.string	""
 176 0203 0103FFFF 		.string	"\001\003\377\377\377\377\377\377\377\377\0025"
 176      FFFFFFFF 
 176      FFFF0235 
 176      00
 177 0210 00       		.string	""
 178 0211 00       		.string	""
 179 0212 030200   		.string	"\003\002"
 180 0215 00       		.string	""
 181 0216 00       		.string	""
 182 0217 00       		.string	""
 183 0218 020F00   		.string	"\002\017"
 184 021b 00       		.string	""
 185 021c 00       		.string	""
 186 021d 02FFFFFF 		.string	"\002\377\377\377\377\377\377\377\377\003\002\t"
 186      FFFFFFFF 
 186      FF030209 
 186      00
 187 022a 00       		.string	""
 188 022b 00       		.string	""
 189 022c 02FFFFFF 		.string	"\002\377\377\377\377\377\377\377\377\003\002\204"
 189      FFFFFFFF 
 189      FF030284 
 189      00
 190 0239 00       		.string	""
 191 023a 00       		.string	""
 192 023b 0103FFFF 		.string	"\001\003\377\377\377\377\377\377\377\377\0025"
 192      FFFFFFFF 
 192      FFFF0235 
 192      00
 193 0248 00       		.string	""
 194 0249 00       		.string	""
 195 024a 030200   		.string	"\003\002"
 196 024d 00       		.string	""
 197 024e 00       		.string	""
 198 024f 00       		.string	""
 199 0250 023800   		.string	"\0028"
 200 0253 00       		.string	""
 201 0254 00       		.string	""
 202 0255 0103FFFF 		.string	"\001\003\377\377\377\377\377\377\377\377\0025"
 202      FFFFFFFF 
 202      FFFF0235 
 202      00
 203 0262 00       		.string	""
 204 0263 00       		.string	""
 205 0264 030200   		.string	"\003\002"
 206 0267 00       		.string	""
 207 0268 00       		.string	""
 208 0269 00       		.string	""
 209 026a 020F00   		.string	"\002\017"
 210 026d 00       		.string	""
 211 026e 00       		.string	""
 212 026f 02FFFFFF 		.string	"\002\377\377\377\377\377\377\377\377\003\002\t"
 212      FFFFFFFF 
GAS LISTING /tmp/ccU4gSfo.s 			page 6


 212      FF030209 
 212      00
 213 027c 00       		.string	""
 214 027d 00       		.string	""
 215 027e 02FFFFFF 		.string	"\002\377\377\377\377\377\377\377\377\003\0022"
 215      FFFFFFFF 
 215      FF030232 
 215      00
 216 028b 00       		.string	""
 217 028c 00       		.string	""
 218 028d 0103FFFF 		.string	"\001\003\377\377\377\377\377\377\377\377\0025"
 218      FFFFFFFF 
 218      FFFF0235 
 218      00
 219 029a 00       		.string	""
 220 029b 00       		.string	""
 221 029c 030200   		.string	"\003\002"
 222 029f 00       		.string	""
 223 02a0 00       		.string	""
 224 02a1 00       		.string	""
 225 02a2 020F00   		.string	"\002\017"
 226 02a5 00       		.string	""
 227 02a6 00       		.string	""
 228 02a7 02FFFFFF 		.string	"\002\377\377\377\377\377\377\377\377\003\002\t"
 228      FFFFFFFF 
 228      FF030209 
 228      00
 229 02b4 00       		.string	""
 230 02b5 00       		.string	""
 231 02b6 02FFFFFF 		.string	"\002\377\377\377\377\377\377\377\377\002\377\377\377\377\377\377\377\377"
 231      FFFFFFFF 
 231      FF02FFFF 
 231      FFFFFFFF 
 231      FFFF00
 232 02c9 0200     		.string	"\002"
 233 02cb 00       		.string	""
 234 02cc 00       		.string	""
 235 02cd 00       		.string	""
 236 02ce 00       		.string	""
 237              		.text
 238              		.globl	_Z12init_programPiPPc
 240              	_Z12init_programPiPPc:
 241              	.LFB0:
 242              		.file 1 "mpwpl-manual-virt-obf.c"
   1:mpwpl-manual-virt-obf.c **** #include <stdio.h>
   2:mpwpl-manual-virt-obf.c **** #include <string.h>
   3:mpwpl-manual-virt-obf.c **** #include <inttypes.h>
   4:mpwpl-manual-virt-obf.c **** 
   5:mpwpl-manual-virt-obf.c **** typedef int32_t int32;
   6:mpwpl-manual-virt-obf.c **** 
   7:mpwpl-manual-virt-obf.c **** int end_of_execution (const char *&ptr);
   8:mpwpl-manual-virt-obf.c **** void printf_command (const char *&ptr);
   9:mpwpl-manual-virt-obf.c **** void jump_command (const char *&ptr);
  10:mpwpl-manual-virt-obf.c **** void if_then_else_command (const char *&ptr);
  11:mpwpl-manual-virt-obf.c **** bool do_comparison (const char *&ptr, int arg0, int arg1);
  12:mpwpl-manual-virt-obf.c **** int get_argument (const char *&ptr);
  13:mpwpl-manual-virt-obf.c **** 
GAS LISTING /tmp/ccU4gSfo.s 			page 7


  14:mpwpl-manual-virt-obf.c **** const int pointer_size = 8;
  15:mpwpl-manual-virt-obf.c **** const int constant_size = 4;
  16:mpwpl-manual-virt-obf.c **** 
  17:mpwpl-manual-virt-obf.c **** const char *str0 = "Usage: program <command codes>\n";
  18:mpwpl-manual-virt-obf.c **** const char *str1 = "a > 5, b > 5, c > 5 -- case 1\n";
  19:mpwpl-manual-virt-obf.c **** const char *str2 = "a > 5, b > 5, c <= 5 -- case 2\n";
  20:mpwpl-manual-virt-obf.c **** const char *str3 = "a > 5, b <= 5, c > 5 -- case 3\n";
  21:mpwpl-manual-virt-obf.c **** const char *str4 = "a > 5, b <= 5, c <= 5 -- case 4\n";
  22:mpwpl-manual-virt-obf.c **** const char *str5 = "a <= 5, b > 5, c > 5 -- case 5\n";
  23:mpwpl-manual-virt-obf.c **** const char *str6 = "a <= 5, b > 5, c <= 5 -- case 6\n";
  24:mpwpl-manual-virt-obf.c **** const char *str7 = "a <= 5, b <= 5, c > 5 -- case 7\n";
  25:mpwpl-manual-virt-obf.c **** const char *str8 = "a <= 5, b <= 5, c <= 5 -- case 8\n";
  26:mpwpl-manual-virt-obf.c **** const char *str9 = "multi-path program with printf-leafs\n";
  27:mpwpl-manual-virt-obf.c **** 
  28:mpwpl-manual-virt-obf.c **** #define program_text "\x01\x01\xff\xff\xff\xff\xff\xff\xff\xff\x02\x02\x00\x00\x00\x01\x02\x00\x00\
  29:mpwpl-manual-virt-obf.c **** 
  30:mpwpl-manual-virt-obf.c **** /*
  31:mpwpl-manual-virt-obf.c **** const char program_text[] = {
  32:mpwpl-manual-virt-obf.c ****   0x01,
  33:mpwpl-manual-virt-obf.c ****   0x01, '\xFF', '\xFF','\xFF','\xFF', '\xFF', '\xFF','\xFF','\xFF',
  34:mpwpl-manual-virt-obf.c ****   0x02, 2, 0, 0, 0,
  35:mpwpl-manual-virt-obf.c ****   0x01,
  36:mpwpl-manual-virt-obf.c ****   0x02, 0, 0, 0, 0,
  37:mpwpl-manual-virt-obf.c ****   0x02, 15 + 6, 0, 0, 0,
  38:mpwpl-manual-virt-obf.c ****   0x02, // printf
  39:mpwpl-manual-virt-obf.c ****   '\xFF', '\xFF','\xFF','\xFF', '\xFF', '\xFF','\xFF','\xFF',
  40:mpwpl-manual-virt-obf.c ****   0x00, // return -1;
  41:mpwpl-manual-virt-obf.c ****   0x02, -1, -1, -1, -1,
  42:mpwpl-manual-virt-obf.c ****   0x00, // return 0; <- dead-code
  43:mpwpl-manual-virt-obf.c ****   0x02, 0, 0, 0, 0,
  44:mpwpl-manual-virt-obf.c ****   0x01, // if (a>5)
  45:mpwpl-manual-virt-obf.c ****   0x03, '\xFF', '\xFF','\xFF','\xFF', '\xFF', '\xFF','\xFF','\xFF',
  46:mpwpl-manual-virt-obf.c ****   0x02, '0' + 5, 0, 0, 0,
  47:mpwpl-manual-virt-obf.c ****   0x03,
  48:mpwpl-manual-virt-obf.c ****   0x02, 0, 0, 0, 0,
  49:mpwpl-manual-virt-obf.c ****   0x02, char (138), 0, 0, 0, // else of if(a>5)
  50:mpwpl-manual-virt-obf.c ****   0x01,
  51:mpwpl-manual-virt-obf.c ****   0x03, '\xFF', '\xFF','\xFF','\xFF', '\xFF', '\xFF','\xFF','\xFF',
  52:mpwpl-manual-virt-obf.c ****   0x02, '0' + 5, 0, 0, 0,
  53:mpwpl-manual-virt-obf.c ****   0x03,
  54:mpwpl-manual-virt-obf.c ****   0x02, 0, 0, 0, 0,
  55:mpwpl-manual-virt-obf.c ****   0x02, 56, 0, 0, 0, // else of if(b>5)
  56:mpwpl-manual-virt-obf.c ****   0x01,
  57:mpwpl-manual-virt-obf.c ****   0x03, '\xFF', '\xFF','\xFF','\xFF', '\xFF', '\xFF','\xFF','\xFF',
  58:mpwpl-manual-virt-obf.c ****   0x02, '0' + 5, 0, 0, 0,
  59:mpwpl-manual-virt-obf.c ****   0x03,
  60:mpwpl-manual-virt-obf.c ****   0x02, 0, 0, 0, 0,
  61:mpwpl-manual-virt-obf.c ****   0x02, 15, 0, 0, 0, // else of if(c>5)
  62:mpwpl-manual-virt-obf.c ****   0x02, // printf
  63:mpwpl-manual-virt-obf.c ****   '\xFF', '\xFF','\xFF','\xFF', '\xFF', '\xFF','\xFF','\xFF',
  64:mpwpl-manual-virt-obf.c ****   0x03, // jump to end of if(c>5)
  65:mpwpl-manual-virt-obf.c ****   0x02, 9, 0, 0, 0,
  66:mpwpl-manual-virt-obf.c ****   0x02, // printf
  67:mpwpl-manual-virt-obf.c ****   '\xFF', '\xFF','\xFF','\xFF', '\xFF', '\xFF','\xFF','\xFF',
  68:mpwpl-manual-virt-obf.c ****   0x03, // jump to end of if(b>5)
  69:mpwpl-manual-virt-obf.c ****   0x02, 50, 0, 0, 0,
  70:mpwpl-manual-virt-obf.c ****   // else of if(b>5)
GAS LISTING /tmp/ccU4gSfo.s 			page 8


  71:mpwpl-manual-virt-obf.c ****   0x01,
  72:mpwpl-manual-virt-obf.c ****   0x03, '\xFF', '\xFF','\xFF','\xFF', '\xFF', '\xFF','\xFF','\xFF',
  73:mpwpl-manual-virt-obf.c ****   0x02, '0' + 5, 0, 0, 0,
  74:mpwpl-manual-virt-obf.c ****   0x03,
  75:mpwpl-manual-virt-obf.c ****   0x02, 0, 0, 0, 0,
  76:mpwpl-manual-virt-obf.c ****   0x02, 15, 0, 0, 0, // else of if(b<=5) ... if(c>5)
  77:mpwpl-manual-virt-obf.c ****   0x02, // printf
  78:mpwpl-manual-virt-obf.c ****   '\xFF', '\xFF','\xFF','\xFF', '\xFF', '\xFF','\xFF','\xFF',
  79:mpwpl-manual-virt-obf.c ****   0x03, // jump to end of if(c>5)
  80:mpwpl-manual-virt-obf.c ****   0x02, 9, 0, 0, 0,
  81:mpwpl-manual-virt-obf.c ****   0x02, // printf
  82:mpwpl-manual-virt-obf.c ****   '\xFF', '\xFF','\xFF','\xFF', '\xFF', '\xFF','\xFF','\xFF',
  83:mpwpl-manual-virt-obf.c ****   0x03, // jump to end of if(a>5)
  84:mpwpl-manual-virt-obf.c ****   0x02, char (132), 0, 0, 0,
  85:mpwpl-manual-virt-obf.c ****   // else of if(a>5)
  86:mpwpl-manual-virt-obf.c **** 
  87:mpwpl-manual-virt-obf.c ****   0x01,
  88:mpwpl-manual-virt-obf.c ****   0x03, '\xFF', '\xFF','\xFF','\xFF', '\xFF', '\xFF','\xFF','\xFF',
  89:mpwpl-manual-virt-obf.c ****   0x02, '0' + 5, 0, 0, 0,
  90:mpwpl-manual-virt-obf.c ****   0x03,
  91:mpwpl-manual-virt-obf.c ****   0x02, 0, 0, 0, 0,
  92:mpwpl-manual-virt-obf.c ****   0x02, 56, 0, 0, 0, // else of if(b>5)
  93:mpwpl-manual-virt-obf.c ****   0x01,
  94:mpwpl-manual-virt-obf.c ****   0x03, '\xFF', '\xFF','\xFF','\xFF', '\xFF', '\xFF','\xFF','\xFF',
  95:mpwpl-manual-virt-obf.c ****   0x02, '0' + 5, 0, 0, 0,
  96:mpwpl-manual-virt-obf.c ****   0x03,
  97:mpwpl-manual-virt-obf.c ****   0x02, 0, 0, 0, 0,
  98:mpwpl-manual-virt-obf.c ****   0x02, 15, 0, 0, 0, // else of if(c>5)
  99:mpwpl-manual-virt-obf.c ****   0x02, // printf case 5
 100:mpwpl-manual-virt-obf.c ****   '\xFF', '\xFF','\xFF','\xFF', '\xFF', '\xFF','\xFF','\xFF',
 101:mpwpl-manual-virt-obf.c ****   0x03, // jump to end of if(c>5)
 102:mpwpl-manual-virt-obf.c ****   0x02, 9, 0, 0, 0,
 103:mpwpl-manual-virt-obf.c ****   0x02, // printf case 6
 104:mpwpl-manual-virt-obf.c ****   '\xFF', '\xFF','\xFF','\xFF', '\xFF', '\xFF','\xFF','\xFF',
 105:mpwpl-manual-virt-obf.c ****   0x03, // jump to end of if(b>5)
 106:mpwpl-manual-virt-obf.c ****   0x02, 50, 0, 0, 0,
 107:mpwpl-manual-virt-obf.c ****   // else of if(b>5)
 108:mpwpl-manual-virt-obf.c ****   0x01,
 109:mpwpl-manual-virt-obf.c ****   0x03, '\xFF', '\xFF','\xFF','\xFF', '\xFF', '\xFF','\xFF','\xFF',
 110:mpwpl-manual-virt-obf.c ****   0x02, '0' + 5, 0, 0, 0,
 111:mpwpl-manual-virt-obf.c ****   0x03,
 112:mpwpl-manual-virt-obf.c ****   0x02, 0, 0, 0, 0,
 113:mpwpl-manual-virt-obf.c ****   0x02, 15, 0, 0, 0, // else of if(b<=5) ... if(c>5)
 114:mpwpl-manual-virt-obf.c ****   0x02, // printf case 7
 115:mpwpl-manual-virt-obf.c ****   '\xFF', '\xFF','\xFF','\xFF', '\xFF', '\xFF','\xFF','\xFF',
 116:mpwpl-manual-virt-obf.c ****   0x03, // jump to end of if(c>5)
 117:mpwpl-manual-virt-obf.c ****   0x02, 9, 0, 0, 0,
 118:mpwpl-manual-virt-obf.c ****   0x02, // printf
 119:mpwpl-manual-virt-obf.c ****   '\xFF', '\xFF','\xFF','\xFF', '\xFF', '\xFF','\xFF','\xFF',
 120:mpwpl-manual-virt-obf.c ****   // end of if(a>5)
 121:mpwpl-manual-virt-obf.c ****   0x02, // final printf
 122:mpwpl-manual-virt-obf.c ****   '\xFF', '\xFF','\xFF','\xFF', '\xFF', '\xFF','\xFF','\xFF',
 123:mpwpl-manual-virt-obf.c ****   0x00, // return 0;
 124:mpwpl-manual-virt-obf.c ****   0x02, 0, 0, 0, 0,
 125:mpwpl-manual-virt-obf.c **** };
 126:mpwpl-manual-virt-obf.c **** */
 127:mpwpl-manual-virt-obf.c **** 
GAS LISTING /tmp/ccU4gSfo.s 			page 9


 128:mpwpl-manual-virt-obf.c **** char program[sizeof (program_text)];
 129:mpwpl-manual-virt-obf.c **** 
 130:mpwpl-manual-virt-obf.c **** const char *init_program (int *argcptr, char *argv[]) {
 243              		.loc 1 130 0
 244              		.cfi_startproc
 245 0000 55       		pushq	%rbp
 246              		.cfi_def_cfa_offset 16
 247              		.cfi_offset 6, -16
 248 0001 4889E5   		movq	%rsp, %rbp
 249              		.cfi_def_cfa_register 6
 250 0004 48897DF8 		movq	%rdi, -8(%rbp)
 251 0008 488975F0 		movq	%rsi, -16(%rbp)
 131:mpwpl-manual-virt-obf.c ****   static_assert (sizeof (program_text) > 300, "wrong program text");
 132:mpwpl-manual-virt-obf.c ****   memcpy (program, program_text, sizeof (program_text));
 252              		.loc 1 132 0
 253 000c BA000000 		movl	$program, %edx
 253      00
 254 0011 B8000000 		movl	$.LC10, %eax
 254      00
 255 0016 B92C0000 		movl	$44, %ecx
 255      00
 256 001b 4889D7   		movq	%rdx, %rdi
 257 001e 4889C6   		movq	%rax, %rsi
 258 0021 F348A5   		rep movsq
 259 0024 4889F0   		movq	%rsi, %rax
 260 0027 4889FA   		movq	%rdi, %rdx
 261 002a 8B08     		movl	(%rax), %ecx
 262 002c 890A     		movl	%ecx, (%rdx)
 263 002e 488D5204 		leaq	4(%rdx), %rdx
 264 0032 488D4004 		leaq	4(%rax), %rax
 265 0036 0FB708   		movzwl	(%rax), %ecx
 266 0039 66890A   		movw	%cx, (%rdx)
 267 003c 488D5202 		leaq	2(%rdx), %rdx
 268 0040 488D4002 		leaq	2(%rax), %rax
 269 0044 0FB608   		movzbl	(%rax), %ecx
 270 0047 880A     		movb	%cl, (%rdx)
 271 0049 488D5201 		leaq	1(%rdx), %rdx
 272 004d 488D4001 		leaq	1(%rax), %rax
 133:mpwpl-manual-virt-obf.c ****   static_assert (sizeof (int *) <= pointer_size, "wrong pointer size");
 134:mpwpl-manual-virt-obf.c ****   *((int **) (&program[2])) = argcptr;
 273              		.loc 1 134 0
 274 0051 BA000000 		movl	$program+2, %edx
 274      00
 275 0056 488B45F8 		movq	-8(%rbp), %rax
 276 005a 488902   		movq	%rax, (%rdx)
 135:mpwpl-manual-virt-obf.c ****   *((const char **) (&program[27])) = str0;
 277              		.loc 1 135 0
 278 005d BA000000 		movl	$program+27, %edx
 278      00
 279 0062 488B0500 		movq	str0(%rip), %rax
 279      000000
 280 0069 488902   		movq	%rax, (%rdx)
 136:mpwpl-manual-virt-obf.c ****   *((const char **) (&program[49])) = &argv[1][0];
 281              		.loc 1 136 0
 282 006c BA000000 		movl	$program+49, %edx
 282      00
 283 0071 488B45F0 		movq	-16(%rbp), %rax
GAS LISTING /tmp/ccU4gSfo.s 			page 10


 284 0075 488B4008 		movq	8(%rax), %rax
 285 0079 488902   		movq	%rax, (%rdx)
 137:mpwpl-manual-virt-obf.c ****   *((const char **) (&program[75])) = &argv[1][1];
 286              		.loc 1 137 0
 287 007c BA000000 		movl	$program+75, %edx
 287      00
 288 0081 488B45F0 		movq	-16(%rbp), %rax
 289 0085 4883C008 		addq	$8, %rax
 290 0089 488B00   		movq	(%rax), %rax
 291 008c 4883C001 		addq	$1, %rax
 292 0090 488902   		movq	%rax, (%rdx)
 138:mpwpl-manual-virt-obf.c ****   *((const char **) (&program[101])) = &argv[1][2];
 293              		.loc 1 138 0
 294 0093 BA000000 		movl	$program+101, %edx
 294      00
 295 0098 488B45F0 		movq	-16(%rbp), %rax
 296 009c 4883C008 		addq	$8, %rax
 297 00a0 488B00   		movq	(%rax), %rax
 298 00a3 4883C002 		addq	$2, %rax
 299 00a7 488902   		movq	%rax, (%rdx)
 139:mpwpl-manual-virt-obf.c ****   *((const char **) (&program[126])) = str1;
 300              		.loc 1 139 0
 301 00aa BA000000 		movl	$program+126, %edx
 301      00
 302 00af 488B0500 		movq	str1(%rip), %rax
 302      000000
 303 00b6 488902   		movq	%rax, (%rdx)
 140:mpwpl-manual-virt-obf.c ****   *((const char **) (&program[141])) = str2;
 304              		.loc 1 140 0
 305 00b9 BA000000 		movl	$program+141, %edx
 305      00
 306 00be 488B0500 		movq	str2(%rip), %rax
 306      000000
 307 00c5 488902   		movq	%rax, (%rdx)
 141:mpwpl-manual-virt-obf.c ****   *((const char **) (&program[157])) = &argv[1][2];
 308              		.loc 1 141 0
 309 00c8 BA000000 		movl	$program+157, %edx
 309      00
 310 00cd 488B45F0 		movq	-16(%rbp), %rax
 311 00d1 4883C008 		addq	$8, %rax
 312 00d5 488B00   		movq	(%rax), %rax
 313 00d8 4883C002 		addq	$2, %rax
 314 00dc 488902   		movq	%rax, (%rdx)
 142:mpwpl-manual-virt-obf.c ****   *((const char **) (&program[182])) = str3;
 315              		.loc 1 142 0
 316 00df BA000000 		movl	$program+182, %edx
 316      00
 317 00e4 488B0500 		movq	str3(%rip), %rax
 317      000000
 318 00eb 488902   		movq	%rax, (%rdx)
 143:mpwpl-manual-virt-obf.c ****   *((const char **) (&program[197])) = str4;
 319              		.loc 1 143 0
 320 00ee BA000000 		movl	$program+197, %edx
 320      00
 321 00f3 488B0500 		movq	str4(%rip), %rax
 321      000000
 322 00fa 488902   		movq	%rax, (%rdx)
GAS LISTING /tmp/ccU4gSfo.s 			page 11


 144:mpwpl-manual-virt-obf.c ****   *((const char **) (&program[213])) = &argv[1][1];
 323              		.loc 1 144 0
 324 00fd BA000000 		movl	$program+213, %edx
 324      00
 325 0102 488B45F0 		movq	-16(%rbp), %rax
 326 0106 4883C008 		addq	$8, %rax
 327 010a 488B00   		movq	(%rax), %rax
 328 010d 4883C001 		addq	$1, %rax
 329 0111 488902   		movq	%rax, (%rdx)
 145:mpwpl-manual-virt-obf.c ****   *((const char **) (&program[239])) = &argv[1][2];
 330              		.loc 1 145 0
 331 0114 BA000000 		movl	$program+239, %edx
 331      00
 332 0119 488B45F0 		movq	-16(%rbp), %rax
 333 011d 4883C008 		addq	$8, %rax
 334 0121 488B00   		movq	(%rax), %rax
 335 0124 4883C002 		addq	$2, %rax
 336 0128 488902   		movq	%rax, (%rdx)
 146:mpwpl-manual-virt-obf.c ****   *((const char **) (&program[264])) = str5;
 337              		.loc 1 146 0
 338 012b BA000000 		movl	$program+264, %edx
 338      00
 339 0130 488B0500 		movq	str5(%rip), %rax
 339      000000
 340 0137 488902   		movq	%rax, (%rdx)
 147:mpwpl-manual-virt-obf.c ****   *((const char **) (&program[279])) = str6;
 341              		.loc 1 147 0
 342 013a BA000000 		movl	$program+279, %edx
 342      00
 343 013f 488B0500 		movq	str6(%rip), %rax
 343      000000
 344 0146 488902   		movq	%rax, (%rdx)
 148:mpwpl-manual-virt-obf.c ****   *((const char **) (&program[295])) = &argv[1][2];
 345              		.loc 1 148 0
 346 0149 BA000000 		movl	$program+295, %edx
 346      00
 347 014e 488B45F0 		movq	-16(%rbp), %rax
 348 0152 4883C008 		addq	$8, %rax
 349 0156 488B00   		movq	(%rax), %rax
 350 0159 4883C002 		addq	$2, %rax
 351 015d 488902   		movq	%rax, (%rdx)
 149:mpwpl-manual-virt-obf.c ****   *((const char **) (&program[320])) = str7;
 352              		.loc 1 149 0
 353 0160 BA000000 		movl	$program+320, %edx
 353      00
 354 0165 488B0500 		movq	str7(%rip), %rax
 354      000000
 355 016c 488902   		movq	%rax, (%rdx)
 150:mpwpl-manual-virt-obf.c ****   *((const char **) (&program[335])) = str8;
 356              		.loc 1 150 0
 357 016f BA000000 		movl	$program+335, %edx
 357      00
 358 0174 488B0500 		movq	str8(%rip), %rax
 358      000000
 359 017b 488902   		movq	%rax, (%rdx)
 151:mpwpl-manual-virt-obf.c ****   *((const char **) (&program[344])) = str9;
 360              		.loc 1 151 0
GAS LISTING /tmp/ccU4gSfo.s 			page 12


 361 017e BA000000 		movl	$program+344, %edx
 361      00
 362 0183 488B0500 		movq	str9(%rip), %rax
 362      000000
 363 018a 488902   		movq	%rax, (%rdx)
 152:mpwpl-manual-virt-obf.c ****   return program;
 364              		.loc 1 152 0
 365 018d B8000000 		movl	$program, %eax
 365      00
 153:mpwpl-manual-virt-obf.c **** }
 366              		.loc 1 153 0
 367 0192 5D       		popq	%rbp
 368              		.cfi_def_cfa 7, 8
 369 0193 C3       		ret
 370              		.cfi_endproc
 371              	.LFE0:
 373              		.globl	main
 375              	main:
 376              	.LFB1:
 154:mpwpl-manual-virt-obf.c **** 
 155:mpwpl-manual-virt-obf.c **** int main (int argc, char *argv[]) {
 377              		.loc 1 155 0
 378              		.cfi_startproc
 379 0194 55       		pushq	%rbp
 380              		.cfi_def_cfa_offset 16
 381              		.cfi_offset 6, -16
 382 0195 4889E5   		movq	%rsp, %rbp
 383              		.cfi_def_cfa_register 6
 384 0198 4883EC20 		subq	$32, %rsp
 385 019c 897DEC   		movl	%edi, -20(%rbp)
 386 019f 488975E0 		movq	%rsi, -32(%rbp)
 387              	.LBB2:
 156:mpwpl-manual-virt-obf.c ****   const char *ptr = init_program (&argc, argv);
 388              		.loc 1 156 0
 389 01a3 488B55E0 		movq	-32(%rbp), %rdx
 390 01a7 488D45EC 		leaq	-20(%rbp), %rax
 391 01ab 4889D6   		movq	%rdx, %rsi
 392 01ae 4889C7   		movq	%rax, %rdi
 393 01b1 E8000000 		call	_Z12init_programPiPPc
 393      00
 394 01b6 488945F8 		movq	%rax, -8(%rbp)
 395              	.L11:
 157:mpwpl-manual-virt-obf.c ****   for (;;) {
 158:mpwpl-manual-virt-obf.c ****     switch (*ptr) {
 396              		.loc 1 158 0
 397 01ba 488B45F8 		movq	-8(%rbp), %rax
 398 01be 0FB600   		movzbl	(%rax), %eax
 399 01c1 0FBEC0   		movsbl	%al, %eax
 400 01c4 83F801   		cmpl	$1, %eax
 401 01c7 7425     		je	.L5
 402 01c9 83F801   		cmpl	$1, %eax
 403 01cc 7F06     		jg	.L6
 404 01ce 85C0     		testl	%eax, %eax
 405 01d0 740E     		je	.L7
 406 01d2 EB43     		jmp	.L4
 407              	.L6:
 408 01d4 83F802   		cmpl	$2, %eax
GAS LISTING /tmp/ccU4gSfo.s 			page 13


 409 01d7 7423     		je	.L8
 410 01d9 83F803   		cmpl	$3, %eax
 411 01dc 742C     		je	.L9
 412 01de EB37     		jmp	.L4
 413              	.L7:
 159:mpwpl-manual-virt-obf.c ****       case 0x00:
 160:mpwpl-manual-virt-obf.c ****         return end_of_execution (ptr);
 414              		.loc 1 160 0
 415 01e0 488D45F8 		leaq	-8(%rbp), %rax
 416 01e4 4889C7   		movq	%rax, %rdi
 417 01e7 E8000000 		call	_Z16end_of_executionRPKc
 417      00
 418 01ec EB2B     		jmp	.L12
 419              	.L5:
 161:mpwpl-manual-virt-obf.c ****       case 0x01:
 162:mpwpl-manual-virt-obf.c ****         if_then_else_command (ptr);
 420              		.loc 1 162 0
 421 01ee 488D45F8 		leaq	-8(%rbp), %rax
 422 01f2 4889C7   		movq	%rax, %rdi
 423 01f5 E8000000 		call	_Z20if_then_else_commandRPKc
 423      00
 163:mpwpl-manual-virt-obf.c ****         break;
 424              		.loc 1 163 0
 425 01fa EB1B     		jmp	.L4
 426              	.L8:
 164:mpwpl-manual-virt-obf.c ****       case 0x02:
 165:mpwpl-manual-virt-obf.c ****         printf_command (ptr);
 427              		.loc 1 165 0
 428 01fc 488D45F8 		leaq	-8(%rbp), %rax
 429 0200 4889C7   		movq	%rax, %rdi
 430 0203 E8000000 		call	_Z14printf_commandRPKc
 430      00
 166:mpwpl-manual-virt-obf.c ****         break;
 431              		.loc 1 166 0
 432 0208 EB0D     		jmp	.L4
 433              	.L9:
 167:mpwpl-manual-virt-obf.c ****       case 0x03:
 168:mpwpl-manual-virt-obf.c ****         jump_command (ptr);
 434              		.loc 1 168 0
 435 020a 488D45F8 		leaq	-8(%rbp), %rax
 436 020e 4889C7   		movq	%rax, %rdi
 437 0211 E8000000 		call	_Z12jump_commandRPKc
 437      00
 169:mpwpl-manual-virt-obf.c ****         break;
 438              		.loc 1 169 0
 439 0216 90       		nop
 440              	.L4:
 170:mpwpl-manual-virt-obf.c ****     }
 171:mpwpl-manual-virt-obf.c ****   }
 172:mpwpl-manual-virt-obf.c ****   delete[] ptr;
 173:mpwpl-manual-virt-obf.c ****   return 0;
 441              		.loc 1 173 0
 442 0217 EBA1     		jmp	.L11
 443              	.L12:
 444              	.LBE2:
 174:mpwpl-manual-virt-obf.c **** }
 445              		.loc 1 174 0 discriminator 1
GAS LISTING /tmp/ccU4gSfo.s 			page 14


 446 0219 C9       		leave
 447              		.cfi_def_cfa 7, 8
 448 021a C3       		ret
 449              		.cfi_endproc
 450              	.LFE1:
 452              		.globl	_Z16end_of_executionRPKc
 454              	_Z16end_of_executionRPKc:
 455              	.LFB2:
 175:mpwpl-manual-virt-obf.c **** 
 176:mpwpl-manual-virt-obf.c **** int end_of_execution (const char *&ptr) {
 456              		.loc 1 176 0
 457              		.cfi_startproc
 458 021b 55       		pushq	%rbp
 459              		.cfi_def_cfa_offset 16
 460              		.cfi_offset 6, -16
 461 021c 4889E5   		movq	%rsp, %rbp
 462              		.cfi_def_cfa_register 6
 463 021f 4883EC20 		subq	$32, %rsp
 464 0223 48897DE8 		movq	%rdi, -24(%rbp)
 465              	.LBB3:
 177:mpwpl-manual-virt-obf.c ****   ++ptr;
 466              		.loc 1 177 0
 467 0227 488B45E8 		movq	-24(%rbp), %rax
 468 022b 488B00   		movq	(%rax), %rax
 469 022e 488D5001 		leaq	1(%rax), %rdx
 470 0232 488B45E8 		movq	-24(%rbp), %rax
 471 0236 488910   		movq	%rdx, (%rax)
 178:mpwpl-manual-virt-obf.c ****   const int arg0 = get_argument (ptr);
 472              		.loc 1 178 0
 473 0239 488B45E8 		movq	-24(%rbp), %rax
 474 023d 4889C7   		movq	%rax, %rdi
 475 0240 E8000000 		call	_Z12get_argumentRPKc
 475      00
 476 0245 8945FC   		movl	%eax, -4(%rbp)
 179:mpwpl-manual-virt-obf.c ****   return arg0;
 477              		.loc 1 179 0
 478 0248 8B45FC   		movl	-4(%rbp), %eax
 479              	.LBE3:
 180:mpwpl-manual-virt-obf.c **** }
 480              		.loc 1 180 0
 481 024b C9       		leave
 482              		.cfi_def_cfa 7, 8
 483 024c C3       		ret
 484              		.cfi_endproc
 485              	.LFE2:
 487              		.globl	_Z14printf_commandRPKc
 489              	_Z14printf_commandRPKc:
 490              	.LFB3:
 181:mpwpl-manual-virt-obf.c **** 
 182:mpwpl-manual-virt-obf.c **** void printf_command (const char *&ptr) {
 491              		.loc 1 182 0
 492              		.cfi_startproc
 493 024d 55       		pushq	%rbp
 494              		.cfi_def_cfa_offset 16
 495              		.cfi_offset 6, -16
 496 024e 4889E5   		movq	%rsp, %rbp
 497              		.cfi_def_cfa_register 6
GAS LISTING /tmp/ccU4gSfo.s 			page 15


 498 0251 4883EC20 		subq	$32, %rsp
 499 0255 48897DE8 		movq	%rdi, -24(%rbp)
 500              	.LBB4:
 183:mpwpl-manual-virt-obf.c ****   ++ptr;
 501              		.loc 1 183 0
 502 0259 488B45E8 		movq	-24(%rbp), %rax
 503 025d 488B00   		movq	(%rax), %rax
 504 0260 488D5001 		leaq	1(%rax), %rdx
 505 0264 488B45E8 		movq	-24(%rbp), %rax
 506 0268 488910   		movq	%rdx, (%rax)
 184:mpwpl-manual-virt-obf.c ****   const char **format = (const char **) ptr;
 507              		.loc 1 184 0
 508 026b 488B45E8 		movq	-24(%rbp), %rax
 509 026f 488B00   		movq	(%rax), %rax
 510 0272 488945F8 		movq	%rax, -8(%rbp)
 185:mpwpl-manual-virt-obf.c ****   ptr += pointer_size;
 511              		.loc 1 185 0
 512 0276 488B45E8 		movq	-24(%rbp), %rax
 513 027a 488B10   		movq	(%rax), %rdx
 514 027d B8080000 		movl	$8, %eax
 514      00
 515 0282 4898     		cltq
 516 0284 4801C2   		addq	%rax, %rdx
 517 0287 488B45E8 		movq	-24(%rbp), %rax
 518 028b 488910   		movq	%rdx, (%rax)
 186:mpwpl-manual-virt-obf.c ****   printf (*format);
 519              		.loc 1 186 0
 520 028e 488B45F8 		movq	-8(%rbp), %rax
 521 0292 488B00   		movq	(%rax), %rax
 522 0295 4889C7   		movq	%rax, %rdi
 523 0298 B8000000 		movl	$0, %eax
 523      00
 524 029d E8000000 		call	printf
 524      00
 525              	.LBE4:
 187:mpwpl-manual-virt-obf.c **** }
 526              		.loc 1 187 0
 527 02a2 C9       		leave
 528              		.cfi_def_cfa 7, 8
 529 02a3 C3       		ret
 530              		.cfi_endproc
 531              	.LFE3:
 533              		.globl	_Z12jump_commandRPKc
 535              	_Z12jump_commandRPKc:
 536              	.LFB4:
 188:mpwpl-manual-virt-obf.c **** 
 189:mpwpl-manual-virt-obf.c **** void jump_command (const char *&ptr) {
 537              		.loc 1 189 0
 538              		.cfi_startproc
 539 02a4 55       		pushq	%rbp
 540              		.cfi_def_cfa_offset 16
 541              		.cfi_offset 6, -16
 542 02a5 4889E5   		movq	%rsp, %rbp
 543              		.cfi_def_cfa_register 6
 544 02a8 4883EC20 		subq	$32, %rsp
 545 02ac 48897DE8 		movq	%rdi, -24(%rbp)
 546              	.LBB5:
GAS LISTING /tmp/ccU4gSfo.s 			page 16


 190:mpwpl-manual-virt-obf.c ****   ++ptr;
 547              		.loc 1 190 0
 548 02b0 488B45E8 		movq	-24(%rbp), %rax
 549 02b4 488B00   		movq	(%rax), %rax
 550 02b7 488D5001 		leaq	1(%rax), %rdx
 551 02bb 488B45E8 		movq	-24(%rbp), %rax
 552 02bf 488910   		movq	%rdx, (%rax)
 191:mpwpl-manual-virt-obf.c ****   const int offset = get_argument (ptr);
 553              		.loc 1 191 0
 554 02c2 488B45E8 		movq	-24(%rbp), %rax
 555 02c6 4889C7   		movq	%rax, %rdi
 556 02c9 E8000000 		call	_Z12get_argumentRPKc
 556      00
 557 02ce 8945FC   		movl	%eax, -4(%rbp)
 192:mpwpl-manual-virt-obf.c ****   ptr += offset;
 558              		.loc 1 192 0
 559 02d1 488B45E8 		movq	-24(%rbp), %rax
 560 02d5 488B10   		movq	(%rax), %rdx
 561 02d8 8B45FC   		movl	-4(%rbp), %eax
 562 02db 4898     		cltq
 563 02dd 4801C2   		addq	%rax, %rdx
 564 02e0 488B45E8 		movq	-24(%rbp), %rax
 565 02e4 488910   		movq	%rdx, (%rax)
 566              	.LBE5:
 193:mpwpl-manual-virt-obf.c **** }
 567              		.loc 1 193 0
 568 02e7 C9       		leave
 569              		.cfi_def_cfa 7, 8
 570 02e8 C3       		ret
 571              		.cfi_endproc
 572              	.LFE4:
 574              		.globl	_Z20if_then_else_commandRPKc
 576              	_Z20if_then_else_commandRPKc:
 577              	.LFB5:
 194:mpwpl-manual-virt-obf.c **** 
 195:mpwpl-manual-virt-obf.c **** void if_then_else_command (const char *&ptr) {
 578              		.loc 1 195 0
 579              		.cfi_startproc
 580 02e9 55       		pushq	%rbp
 581              		.cfi_def_cfa_offset 16
 582              		.cfi_offset 6, -16
 583 02ea 4889E5   		movq	%rsp, %rbp
 584              		.cfi_def_cfa_register 6
 585 02ed 4883EC30 		subq	$48, %rsp
 586 02f1 48897DD8 		movq	%rdi, -40(%rbp)
 587              	.LBB6:
 196:mpwpl-manual-virt-obf.c ****   ++ptr;
 588              		.loc 1 196 0
 589 02f5 488B45D8 		movq	-40(%rbp), %rax
 590 02f9 488B00   		movq	(%rax), %rax
 591 02fc 488D5001 		leaq	1(%rax), %rdx
 592 0300 488B45D8 		movq	-40(%rbp), %rax
 593 0304 488910   		movq	%rdx, (%rax)
 197:mpwpl-manual-virt-obf.c ****   const int arg0 = get_argument (ptr);
 594              		.loc 1 197 0
 595 0307 488B45D8 		movq	-40(%rbp), %rax
 596 030b 4889C7   		movq	%rax, %rdi
GAS LISTING /tmp/ccU4gSfo.s 			page 17


 597 030e E8000000 		call	_Z12get_argumentRPKc
 597      00
 598 0313 8945FC   		movl	%eax, -4(%rbp)
 198:mpwpl-manual-virt-obf.c ****   const int arg1 = get_argument (ptr);
 599              		.loc 1 198 0
 600 0316 488B45D8 		movq	-40(%rbp), %rax
 601 031a 4889C7   		movq	%rax, %rdi
 602 031d E8000000 		call	_Z12get_argumentRPKc
 602      00
 603 0322 8945F8   		movl	%eax, -8(%rbp)
 199:mpwpl-manual-virt-obf.c ****   const bool res = do_comparison (ptr, arg0, arg1);
 604              		.loc 1 199 0
 605 0325 8B55F8   		movl	-8(%rbp), %edx
 606 0328 8B4DFC   		movl	-4(%rbp), %ecx
 607 032b 488B45D8 		movq	-40(%rbp), %rax
 608 032f 89CE     		movl	%ecx, %esi
 609 0331 4889C7   		movq	%rax, %rdi
 610 0334 E8000000 		call	_Z13do_comparisonRPKcii
 610      00
 611 0339 8845F7   		movb	%al, -9(%rbp)
 200:mpwpl-manual-virt-obf.c ****   const int thenpart = get_argument (ptr);
 612              		.loc 1 200 0
 613 033c 488B45D8 		movq	-40(%rbp), %rax
 614 0340 4889C7   		movq	%rax, %rdi
 615 0343 E8000000 		call	_Z12get_argumentRPKc
 615      00
 616 0348 8945F0   		movl	%eax, -16(%rbp)
 201:mpwpl-manual-virt-obf.c ****   const int elsepart = get_argument (ptr);
 617              		.loc 1 201 0
 618 034b 488B45D8 		movq	-40(%rbp), %rax
 619 034f 4889C7   		movq	%rax, %rdi
 620 0352 E8000000 		call	_Z12get_argumentRPKc
 620      00
 621 0357 8945EC   		movl	%eax, -20(%rbp)
 202:mpwpl-manual-virt-obf.c ****   if (res) {
 622              		.loc 1 202 0
 623 035a 807DF700 		cmpb	$0, -9(%rbp)
 624 035e 7418     		je	.L18
 203:mpwpl-manual-virt-obf.c ****     ptr += thenpart;
 625              		.loc 1 203 0
 626 0360 488B45D8 		movq	-40(%rbp), %rax
 627 0364 488B10   		movq	(%rax), %rdx
 628 0367 8B45F0   		movl	-16(%rbp), %eax
 629 036a 4898     		cltq
 630 036c 4801C2   		addq	%rax, %rdx
 631 036f 488B45D8 		movq	-40(%rbp), %rax
 632 0373 488910   		movq	%rdx, (%rax)
 633 0376 EB16     		jmp	.L17
 634              	.L18:
 204:mpwpl-manual-virt-obf.c ****   } else {
 205:mpwpl-manual-virt-obf.c ****     ptr += elsepart;
 635              		.loc 1 205 0
 636 0378 488B45D8 		movq	-40(%rbp), %rax
 637 037c 488B10   		movq	(%rax), %rdx
 638 037f 8B45EC   		movl	-20(%rbp), %eax
 639 0382 4898     		cltq
 640 0384 4801C2   		addq	%rax, %rdx
GAS LISTING /tmp/ccU4gSfo.s 			page 18


 641 0387 488B45D8 		movq	-40(%rbp), %rax
 642 038b 488910   		movq	%rdx, (%rax)
 643              	.L17:
 644              	.LBE6:
 206:mpwpl-manual-virt-obf.c ****   }
 207:mpwpl-manual-virt-obf.c **** }
 645              		.loc 1 207 0
 646 038e C9       		leave
 647              		.cfi_def_cfa 7, 8
 648 038f C3       		ret
 649              		.cfi_endproc
 650              	.LFE5:
 652              		.section	.rodata
 653              	.LC11:
 654 02cf 77726F6E 		.string	"wrong operator"
 654      67206F70 
 654      65726174 
 654      6F7200
 655              		.text
 656              		.globl	_Z13do_comparisonRPKcii
 658              	_Z13do_comparisonRPKcii:
 659              	.LFB6:
 208:mpwpl-manual-virt-obf.c **** 
 209:mpwpl-manual-virt-obf.c **** bool do_comparison (const char *&ptr, int arg0, int arg1) {
 660              		.loc 1 209 0
 661              		.cfi_startproc
 662 0390 55       		pushq	%rbp
 663              		.cfi_def_cfa_offset 16
 664              		.cfi_offset 6, -16
 665 0391 4889E5   		movq	%rsp, %rbp
 666              		.cfi_def_cfa_register 6
 667 0394 4883EC20 		subq	$32, %rsp
 668 0398 48897DE8 		movq	%rdi, -24(%rbp)
 669 039c 8975E4   		movl	%esi, -28(%rbp)
 670 039f 8955E0   		movl	%edx, -32(%rbp)
 671              	.LBB7:
 210:mpwpl-manual-virt-obf.c ****   const char type = *ptr;
 672              		.loc 1 210 0
 673 03a2 488B45E8 		movq	-24(%rbp), %rax
 674 03a6 488B00   		movq	(%rax), %rax
 675 03a9 0FB600   		movzbl	(%rax), %eax
 676 03ac 8845FF   		movb	%al, -1(%rbp)
 211:mpwpl-manual-virt-obf.c ****   ++ptr;
 677              		.loc 1 211 0
 678 03af 488B45E8 		movq	-24(%rbp), %rax
 679 03b3 488B00   		movq	(%rax), %rax
 680 03b6 488D5001 		leaq	1(%rax), %rdx
 681 03ba 488B45E8 		movq	-24(%rbp), %rax
 682 03be 488910   		movq	%rdx, (%rax)
 212:mpwpl-manual-virt-obf.c ****   if (type == 0x1) {
 683              		.loc 1 212 0
 684 03c1 807DFF01 		cmpb	$1, -1(%rbp)
 685 03c5 750B     		jne	.L21
 213:mpwpl-manual-virt-obf.c ****     return arg0 < arg1;
 686              		.loc 1 213 0
 687 03c7 8B45E4   		movl	-28(%rbp), %eax
 688 03ca 3B45E0   		cmpl	-32(%rbp), %eax
GAS LISTING /tmp/ccU4gSfo.s 			page 19


 689 03cd 0F9CC0   		setl	%al
 690 03d0 EB78     		jmp	.L22
 691              	.L21:
 214:mpwpl-manual-virt-obf.c ****   } else if (type == 0x02) {
 692              		.loc 1 214 0
 693 03d2 807DFF02 		cmpb	$2, -1(%rbp)
 694 03d6 750B     		jne	.L23
 215:mpwpl-manual-virt-obf.c ****     return arg0 <= arg1;
 695              		.loc 1 215 0
 696 03d8 8B45E4   		movl	-28(%rbp), %eax
 697 03db 3B45E0   		cmpl	-32(%rbp), %eax
 698 03de 0F9EC0   		setle	%al
 699 03e1 EB67     		jmp	.L22
 700              	.L23:
 216:mpwpl-manual-virt-obf.c ****   } else if (type == 0x03) {
 701              		.loc 1 216 0
 702 03e3 807DFF03 		cmpb	$3, -1(%rbp)
 703 03e7 750B     		jne	.L24
 217:mpwpl-manual-virt-obf.c ****     return arg0 > arg1;
 704              		.loc 1 217 0
 705 03e9 8B45E4   		movl	-28(%rbp), %eax
 706 03ec 3B45E0   		cmpl	-32(%rbp), %eax
 707 03ef 0F9FC0   		setg	%al
 708 03f2 EB56     		jmp	.L22
 709              	.L24:
 218:mpwpl-manual-virt-obf.c ****   } else if (type == 0x04) {
 710              		.loc 1 218 0
 711 03f4 807DFF04 		cmpb	$4, -1(%rbp)
 712 03f8 750B     		jne	.L25
 219:mpwpl-manual-virt-obf.c ****     return arg0 >= arg1;
 713              		.loc 1 219 0
 714 03fa 8B45E4   		movl	-28(%rbp), %eax
 715 03fd 3B45E0   		cmpl	-32(%rbp), %eax
 716 0400 0F9DC0   		setge	%al
 717 0403 EB45     		jmp	.L22
 718              	.L25:
 220:mpwpl-manual-virt-obf.c ****   } else if (type == 0x05) {
 719              		.loc 1 220 0
 720 0405 807DFF05 		cmpb	$5, -1(%rbp)
 721 0409 750B     		jne	.L26
 221:mpwpl-manual-virt-obf.c ****     return arg0 == arg1;
 722              		.loc 1 221 0
 723 040b 8B45E4   		movl	-28(%rbp), %eax
 724 040e 3B45E0   		cmpl	-32(%rbp), %eax
 725 0411 0F94C0   		sete	%al
 726 0414 EB34     		jmp	.L22
 727              	.L26:
 222:mpwpl-manual-virt-obf.c ****   } else if (type == 0x06) {
 728              		.loc 1 222 0
 729 0416 807DFF06 		cmpb	$6, -1(%rbp)
 730 041a 750B     		jne	.L27
 223:mpwpl-manual-virt-obf.c ****     return arg0 != arg1;
 731              		.loc 1 223 0
 732 041c 8B45E4   		movl	-28(%rbp), %eax
 733 041f 3B45E0   		cmpl	-32(%rbp), %eax
 734 0422 0F95C0   		setne	%al
 735 0425 EB23     		jmp	.L22
GAS LISTING /tmp/ccU4gSfo.s 			page 20


 736              	.L27:
 224:mpwpl-manual-virt-obf.c ****   } else {
 225:mpwpl-manual-virt-obf.c ****     throw "wrong operator";
 737              		.loc 1 225 0
 738 0427 BF080000 		movl	$8, %edi
 738      00
 739 042c E8000000 		call	__cxa_allocate_exception
 739      00
 740 0431 48C70000 		movq	$.LC11, (%rax)
 740      000000
 741 0438 BA000000 		movl	$0, %edx
 741      00
 742 043d BE000000 		movl	$_ZTIPKc, %esi
 742      00
 743 0442 4889C7   		movq	%rax, %rdi
 744 0445 E8000000 		call	__cxa_throw
 744      00
 745              	.L22:
 746              	.LBE7:
 226:mpwpl-manual-virt-obf.c ****   }
 227:mpwpl-manual-virt-obf.c **** }
 747              		.loc 1 227 0
 748 044a C9       		leave
 749              		.cfi_def_cfa 7, 8
 750 044b C3       		ret
 751              		.cfi_endproc
 752              	.LFE6:
 754              		.section	.rodata
 755              	.LC12:
 756 02de 77726F6E 		.string	"wrong type"
 756      67207479 
 756      706500
 757              		.text
 758              		.globl	_Z12get_argumentRPKc
 760              	_Z12get_argumentRPKc:
 761              	.LFB7:
 228:mpwpl-manual-virt-obf.c **** 
 229:mpwpl-manual-virt-obf.c **** int get_argument (const char *&ptr) {
 762              		.loc 1 229 0
 763              		.cfi_startproc
 764 044c 55       		pushq	%rbp
 765              		.cfi_def_cfa_offset 16
 766              		.cfi_offset 6, -16
 767 044d 4889E5   		movq	%rsp, %rbp
 768              		.cfi_def_cfa_register 6
 769 0450 4883EC30 		subq	$48, %rsp
 770 0454 48897DD8 		movq	%rdi, -40(%rbp)
 771              	.LBB8:
 230:mpwpl-manual-virt-obf.c ****   const char type = *ptr;
 772              		.loc 1 230 0
 773 0458 488B45D8 		movq	-40(%rbp), %rax
 774 045c 488B00   		movq	(%rax), %rax
 775 045f 0FB600   		movzbl	(%rax), %eax
 776 0462 8845FF   		movb	%al, -1(%rbp)
 231:mpwpl-manual-virt-obf.c ****   ++ptr;
 777              		.loc 1 231 0
 778 0465 488B45D8 		movq	-40(%rbp), %rax
GAS LISTING /tmp/ccU4gSfo.s 			page 21


 779 0469 488B00   		movq	(%rax), %rax
 780 046c 488D5001 		leaq	1(%rax), %rdx
 781 0470 488B45D8 		movq	-40(%rbp), %rax
 782 0474 488910   		movq	%rdx, (%rax)
 783              	.LBB9:
 232:mpwpl-manual-virt-obf.c ****   if (type == 0x01) { // pointer argument
 784              		.loc 1 232 0
 785 0477 807DFF01 		cmpb	$1, -1(%rbp)
 786 047b 7531     		jne	.L29
 787              	.LBB10:
 233:mpwpl-manual-virt-obf.c ****     const int **arg0 = (const int **) ptr;
 788              		.loc 1 233 0
 789 047d 488B45D8 		movq	-40(%rbp), %rax
 790 0481 488B00   		movq	(%rax), %rax
 791 0484 488945F0 		movq	%rax, -16(%rbp)
 234:mpwpl-manual-virt-obf.c ****     ptr += pointer_size;
 792              		.loc 1 234 0
 793 0488 488B45D8 		movq	-40(%rbp), %rax
 794 048c 488B10   		movq	(%rax), %rdx
 795 048f B8080000 		movl	$8, %eax
 795      00
 796 0494 4898     		cltq
 797 0496 4801C2   		addq	%rax, %rdx
 798 0499 488B45D8 		movq	-40(%rbp), %rax
 799 049d 488910   		movq	%rdx, (%rax)
 235:mpwpl-manual-virt-obf.c ****     return **arg0;
 800              		.loc 1 235 0
 801 04a0 488B45F0 		movq	-16(%rbp), %rax
 802 04a4 488B00   		movq	(%rax), %rax
 803 04a7 8B00     		movl	(%rax), %eax
 804 04a9 E98C0000 		jmp	.L30
 804      00
 805              	.L29:
 806              	.LBE10:
 807              	.LBB11:
 808              	.LBB12:
 236:mpwpl-manual-virt-obf.c ****   } else if (type == 0x02) { // constant argument
 809              		.loc 1 236 0
 810 04ae 807DFF02 		cmpb	$2, -1(%rbp)
 811 04b2 752B     		jne	.L31
 812              	.LBB13:
 237:mpwpl-manual-virt-obf.c ****     const int32 *arg0 = (const int32 *) ptr;
 813              		.loc 1 237 0
 814 04b4 488B45D8 		movq	-40(%rbp), %rax
 815 04b8 488B00   		movq	(%rax), %rax
 816 04bb 488945E8 		movq	%rax, -24(%rbp)
 238:mpwpl-manual-virt-obf.c ****     ptr += constant_size;
 817              		.loc 1 238 0
 818 04bf 488B45D8 		movq	-40(%rbp), %rax
 819 04c3 488B10   		movq	(%rax), %rdx
 820 04c6 B8040000 		movl	$4, %eax
 820      00
 821 04cb 4898     		cltq
 822 04cd 4801C2   		addq	%rax, %rdx
 823 04d0 488B45D8 		movq	-40(%rbp), %rax
 824 04d4 488910   		movq	%rdx, (%rax)
 239:mpwpl-manual-virt-obf.c ****     return *arg0;
GAS LISTING /tmp/ccU4gSfo.s 			page 22


 825              		.loc 1 239 0
 826 04d7 488B45E8 		movq	-24(%rbp), %rax
 827 04db 8B00     		movl	(%rax), %eax
 828 04dd EB5B     		jmp	.L30
 829              	.L31:
 830              	.LBE13:
 831              	.LBB14:
 832              	.LBB15:
 240:mpwpl-manual-virt-obf.c ****   } else if (type == 0x03) { // pointer to char argument
 833              		.loc 1 240 0
 834 04df 807DFF03 		cmpb	$3, -1(%rbp)
 835 04e3 7532     		jne	.L32
 836              	.LBB16:
 241:mpwpl-manual-virt-obf.c ****     const char **arg0 = (const char **) ptr;
 837              		.loc 1 241 0
 838 04e5 488B45D8 		movq	-40(%rbp), %rax
 839 04e9 488B00   		movq	(%rax), %rax
 840 04ec 488945E0 		movq	%rax, -32(%rbp)
 242:mpwpl-manual-virt-obf.c ****     ptr += pointer_size;
 841              		.loc 1 242 0
 842 04f0 488B45D8 		movq	-40(%rbp), %rax
 843 04f4 488B10   		movq	(%rax), %rdx
 844 04f7 B8080000 		movl	$8, %eax
 844      00
 845 04fc 4898     		cltq
 846 04fe 4801C2   		addq	%rax, %rdx
 847 0501 488B45D8 		movq	-40(%rbp), %rax
 848 0505 488910   		movq	%rdx, (%rax)
 243:mpwpl-manual-virt-obf.c ****     return **arg0;
 849              		.loc 1 243 0
 850 0508 488B45E0 		movq	-32(%rbp), %rax
 851 050c 488B00   		movq	(%rax), %rax
 852 050f 0FB600   		movzbl	(%rax), %eax
 853 0512 0FBEC0   		movsbl	%al, %eax
 854 0515 EB23     		jmp	.L30
 855              	.L32:
 856              	.LBE16:
 244:mpwpl-manual-virt-obf.c ****   } else {
 245:mpwpl-manual-virt-obf.c ****     throw "wrong type";
 857              		.loc 1 245 0
 858 0517 BF080000 		movl	$8, %edi
 858      00
 859 051c E8000000 		call	__cxa_allocate_exception
 859      00
 860 0521 48C70000 		movq	$.LC12, (%rax)
 860      000000
 861 0528 BA000000 		movl	$0, %edx
 861      00
 862 052d BE000000 		movl	$_ZTIPKc, %esi
 862      00
 863 0532 4889C7   		movq	%rax, %rdi
 864 0535 E8000000 		call	__cxa_throw
 864      00
 865              	.L30:
 866              	.LBE15:
 867              	.LBE14:
 868              	.LBE12:
GAS LISTING /tmp/ccU4gSfo.s 			page 23


 869              	.LBE11:
 870              	.LBE9:
 871              	.LBE8:
 246:mpwpl-manual-virt-obf.c ****   }
 247:mpwpl-manual-virt-obf.c **** }
 872              		.loc 1 247 0
 873 053a C9       		leave
 874              		.cfi_def_cfa 7, 8
 875 053b C3       		ret
 876              		.cfi_endproc
 877              	.LFE7:
 879              		.section	.rodata
 880 02e9 000000   		.align 4
 883              	_ZL12pointer_size:
 884 02ec 08000000 		.long	8
 885              		.align 4
 888              	_ZL13constant_size:
 889 02f0 04000000 		.long	4
 890              		.text
 891              	.Letext0:
 892              		.file 2 "/usr/include/stdint.h"
GAS LISTING /tmp/ccU4gSfo.s 			page 24


DEFINED SYMBOLS
                            *ABS*:0000000000000000 mpwpl-manual-virt-obf.c
     /tmp/ccU4gSfo.s:13     .data:0000000000000000 str0
     /tmp/ccU4gSfo.s:24     .data:0000000000000008 str1
     /tmp/ccU4gSfo.s:35     .data:0000000000000010 str2
     /tmp/ccU4gSfo.s:46     .data:0000000000000018 str3
     /tmp/ccU4gSfo.s:57     .data:0000000000000020 str4
     /tmp/ccU4gSfo.s:68     .data:0000000000000028 str5
     /tmp/ccU4gSfo.s:79     .data:0000000000000030 str6
     /tmp/ccU4gSfo.s:90     .data:0000000000000038 str7
     /tmp/ccU4gSfo.s:101    .data:0000000000000040 str8
     /tmp/ccU4gSfo.s:112    .data:0000000000000048 str9
     /tmp/ccU4gSfo.s:119    .bss:0000000000000000 program
     /tmp/ccU4gSfo.s:240    .text:0000000000000000 _Z12init_programPiPPc
     /tmp/ccU4gSfo.s:375    .text:0000000000000194 main
     /tmp/ccU4gSfo.s:454    .text:000000000000021b _Z16end_of_executionRPKc
     /tmp/ccU4gSfo.s:576    .text:00000000000002e9 _Z20if_then_else_commandRPKc
     /tmp/ccU4gSfo.s:489    .text:000000000000024d _Z14printf_commandRPKc
     /tmp/ccU4gSfo.s:535    .text:00000000000002a4 _Z12jump_commandRPKc
     /tmp/ccU4gSfo.s:760    .text:000000000000044c _Z12get_argumentRPKc
     /tmp/ccU4gSfo.s:658    .text:0000000000000390 _Z13do_comparisonRPKcii
     /tmp/ccU4gSfo.s:883    .rodata:00000000000002ec _ZL12pointer_size
     /tmp/ccU4gSfo.s:888    .rodata:00000000000002f0 _ZL13constant_size

UNDEFINED SYMBOLS
printf
__cxa_allocate_exception
_ZTIPKc
__cxa_throw
